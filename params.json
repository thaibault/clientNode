{"name":"Jquery-tools","tagline":"Provides mutual exclusion, generic interface controller, object orientated design through the original jquery pattern and selector scoping","body":"jquery-tools\r\n============\r\n\r\nProvides mutual exclusion, generic interface controller, object orientated\r\ndesign through the original jquery pattern and selector scoping.\r\n\r\nUsage\r\n\r\n    // Direct access of a method in \"Tools\".\r\n\r\n    var tools = jQuery.Tools({'logging': true});\r\n    tools.log('test');\r\n    \r\n    -------------------------------------------------------------------------------\r\n    \r\n    // Use as extension for object orientated jquery plugin using inheritance and\r\n    // dom node reference. This plugin pattern gives their instance back.\r\n    \r\n    (function(jQuery) {\r\n        var Example = function(domNode) {\r\n            this._options = {...};\r\n            this.initialize = function(options) {\r\n                // \"domNode\" points to jQuery's wrapped dom node.\r\n                // \"this\" points to this \"Examples\" instance extended by \"Tools\".\r\n                if (options)\r\n                    jQuery.extend(true, this._options, options);\r\n                ...\r\n                return this;\r\n            };\r\n            this.staticMethod = function(anArgument) {\r\n                ...\r\n                return this;\r\n            };\r\n            ...\r\n        };\r\n        jQuery.fn.Example = function() {\r\n            var self = jQuery.Tools()._extend(new Example(this));\r\n            self.__name__ = 'Example';\r\n            return self._controller.apply(self, arguments);\r\n        };\r\n    })(window.jQuery);\r\n    \r\n    // Initialisation:\r\n    var examplesInstance = jQuery('#domNode').Example({'firstOption': 'value'...});\r\n    // Static function call:\r\n    var exampleInstance = jQuery('#domNode').Example('staticMethod', 'anArgument');\r\n    \r\n    -------------------------------------------------------------------------------\r\n    \r\n    // Use as extension for object orientated jquery plugin using inheritance,\r\n    // dom node reference and chaining support.\r\n    \r\n    (function(jQuery) {\r\n        var Example = function(domNode) {\r\n            this._options = {...};\r\n            this.initialize = function(options) {\r\n                // \"domNode\" points to jQuery's wrapped dom node.\r\n                // \"this\" points to this \"Examples\" instance extended by \"Tools\".\r\n                if (options)\r\n                    jQuery.extend(true, this._options, options);\r\n                ...\r\n                return domNode;\r\n            };\r\n            this.staticMethod = function(anArgument) {\r\n                ...\r\n                return domNode;\r\n            };\r\n            ...\r\n        };\r\n        jQuery.fn.Example = function() {\r\n            var self = jQuery.Tools()._extend(new Example(this));\r\n            self.__name__ = 'Example';\r\n            return self._controller.apply(self, arguments);\r\n        };\r\n    })(window.jQuery);\r\n    \r\n    // Initialisation:\r\n    var domNode = jQuery('#domNode').Example({'firstOption': 'value'...});\r\n    // Static function call:\r\n    var domNode = jQuery('#domNode').Example('staticMethod', 'anArgument');\r\n    \r\n    -------------------------------------------------------------------------------\r\n    \r\n    // Use as extension for object orientated jquery plugin using inheritance.\r\n    \r\n    (function(jQuery) {\r\n        var Example = function() {\r\n            this._options = {...};\r\n            this.initialize = function(options) {\r\n                // \"this\" points to this \"Examples\" instance extended by \"Tools\".\r\n                if (options)\r\n                    jQuery.extend(true, this._options, options);\r\n                ...\r\n                return this;\r\n            };\r\n            this.staticMethod = function(anArgument) {\r\n                ...\r\n                return this;\r\n            };\r\n            ...\r\n        };\r\n        jQuery.Example = function() {\r\n            var self = jQuery.Tools()._extend(new Example());\r\n            self.__name__ = 'Example';\r\n            return self._controller.apply(self, arguments);\r\n        };\r\n    })(window.jQuery);\r\n    \r\n    // Initialisation:\r\n    var exampleInstance = jQuery.Example({'firstOption': 'value'...});\r\n    // Static function call:\r\n    var exampleInstance = jQuery.Example('staticMethod', 'anArgument');\r\n    \r\n    -------------------------------------------------------------------------------\r\n    \r\n    // Use as extension for default functional orientated jquery plugin pattern\r\n    // using composition, dom node reference and chaining support.\r\n    \r\n    (function(jQuery) {\r\n        var options = {...};\r\n        var tools = jQuery.Tools();\r\n        var example = function(options) {\r\n            // \"this\" points to dom node graped by jQuery.\r\n            if (options)\r\n                jQuery.extend(true, this._options, options);\r\n            tools.log('initialized.');\r\n            ...\r\n        };\r\n        jQuery.fn.example = function() {\r\n            if (methods[method])\r\n                return methods[method].apply(\r\n                    this, Array.prototype.slice.call(arguments, 1));\r\n            else if (jQuery.type(method) === 'object' || !method)\r\n                return methods.init.apply(this, arguments);\r\n            else\r\n                $.error('Method ' + method + ' does not exist on jQuery.example');\r\n        };\r\n    })(window.jQuery);\r\n    \r\n    // Function call:\r\n    var domNode = jQuery('#domNode').example({'firstOption': 'value'...});\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}