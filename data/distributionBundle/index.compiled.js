(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory((function webpackLoadOptionalExternalModule() { try { return require('jquery'); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define("clientnode", ['jquery'], factory);
	else if(typeof exports === 'object')
		exports["clientnode"] = factory((function webpackLoadOptionalExternalModule() { try { return require('jquery'); } catch(e) {} }()));
	else
		root['clientnode'] = factory(root["jQuery"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************!*\
  !*** multi index ***!
  \*******************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! index.js */1);


/***/ },
/* 1 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global, module) {\n// #!/usr/bin/env node\n// -*- coding: utf-8 -*-\n/** @module clientnode */\n'use strict';\n/* !\n    region header\n    [Project page](http://torben.website/clientnode)\n\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons\n    naming 3.0 unported license.\n    See http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/\n// region imports\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// endregion\n// region determine context\n\n// endregion\n// region types\nvar globalContext = exports.globalContext = function () {\n    if (typeof window === 'undefined') {\n        if (typeof global === 'undefined') return  false ? {} : module;\n        if ('window' in global) return global.window;\n        return global;\n    }\n    return window;\n}();\n/* eslint-disable no-use-before-define */\nvar $ = exports.$ = function () {\n    /* eslint-enable no-use-before-define */\n    var _$ = void 0;\n    if ('$' in globalContext && globalContext.$ !== null) _$ = globalContext.$;else {\n        var _ret = function () {\n            if (!('$' in globalContext)) try {\n                return {\n                    v: __webpack_require__(/*! jquery */ 3)\n                };\n            } catch (error) {}\n            var selector = 'document' in globalContext && 'querySelectorAll' in globalContext.document ? globalContext.document.querySelectorAll : function () {\n                return null;\n            };\n            _$ = function $(parameter) {\n                if (typeof parameter === 'string') {\n                    var $domNodes = selector.apply(globalContext.document, arguments);\n                    if ('fn' in _$) for (var _key in _$.fn) {\n                        if (_$.fn.hasOwnProperty(_key))\n                            // IgnoreTypeCheck\n                            $domNodes[_key] = _$.fn[_key].bind($domNodes);\n                    }return $domNodes;\n                }\n                /* eslint-disable no-use-before-define */\n                if (Tools.isFunction(parameter) && 'document' in globalContext)\n                    /* eslint-enable no-use-before-define */\n                    globalContext.document.addEventListener('DOMContentLoaded', parameter);\n                return parameter;\n            };\n            _$.fn = {};\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n    return _$;\n}();\nif (!('global' in $)) $.global = globalContext;\nif (!('context' in $) && 'document' in $.global) $.contest = $.global.document;\n// endregion\n// region plugins/classes\n/**\n * This plugin provides such interface logic like generic controller logic for\n * integrating plugins into $, mutual exclusion for depending gui elements,\n * logging additional string, array or function handling. A set of helper\n * functions to parse option objects dom trees or handle events is also\n * provided.\n * @property static:abbreviations - Lists all known abbreviation for proper\n * camel case to delimited and back conversion.\n * @property static:animationEndEventNames - Saves a string with all css3\n * browser specific animation end event names.\n * @property static:keyCode - Saves a mapping from key codes to their\n * corresponding name.\n * @property static:maximalSupportedInternetExplorerVersion - Saves currently\n * minimal supported internet explorer version. Saves zero if no internet\n * explorer present.\n * @property static:transitionEndEventNames - Saves a string with all css3\n * browser specific transition end event names.\n * @property static:consoleMethodNames - This variable contains a collection of\n * methods usually binded to the console object.\n * @property static:_javaScriptDependentContentHandled - Indicates whether\n * javaScript dependent content where hide or shown.\n * @property static:_name - Defines this class name to allow retrieving them\n * after name mangling.\n * @property $domNode - $-extended dom node if one was given to the constructor\n * method.\n * @property _options - Options given to the constructor.\n * @property _defaultOptions - Fallback options if not overwritten by the\n * options given to the constructor method.\n * @property _defaultOptions.logging {boolean} - Indicates whether logging\n * should be active.\n * @property _defaultOptions.domNodeSelectorPrefix {string} - Selector prefix\n * for all needed dom nodes.\n * @property _defaultOptions.domNode {Object.<string, string>} - Mapping of\n * names to needed dom nodes referenced by there selector.\n * @property _defaultOptions.domNode.hideJavaScriptEnabled {string} - Selector\n * to dom nodes which should be hidden if javaScript is available.\n * @property _defaultOptions.domNode.showJavaScriptEnabled {string} - Selector\n * to dom nodes which should be visible if javaScript is available.\n * @property _locks - Mapping of lock descriptions to there corresponding\n * callbacks.\n */\n\nvar Tools = function () {\n    // endregion\n    // region public methods\n    // / region special\n    /**\n     * This method should be overwritten normally. It is triggered if current\n     * object is created via the \"new\" keyword. The dom node selector prefix\n     * enforces to not globally select any dom nodes which aren't in the\n     * expected scope of this plugin. \"{1}\" will be automatically replaced with\n     * this plugin name suffix (\"tools\"). You don't have to use \"{1}\" but it\n     * can help you to write code which is more reconcilable with the dry\n     * concept.\n     * @param $domNode - $-extended dom node to use as reference in various\n     * methods.\n     * @param options - Options to change runtime behavior.\n     * @param defaultOptions - Default options to ensure to be present in any\n     * options instance.\n     * @param locks - Mapping of a lock description to callbacks for calling\n     * when given lock should be released.\n     * @returns Returns nothing but if invoked with \"new\" an instance of this\n     * class will be given back.\n     */\n\n    // endregion\n    // region dynamic properties\n    function Tools() {\n        var $domNode = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n        var defaultOptions = arguments.length <= 2 || arguments[2] === undefined ? {\n            logging: false, domNodeSelectorPrefix: 'body', domNode: {\n                hideJavaScriptEnabled: '.tools-hidden-on-javascript-enabled',\n                showJavaScriptEnabled: '.tools-visible-on-javascript-enabled'\n            }\n        } : arguments[2];\n        var locks = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n        _classCallCheck(this, Tools);\n\n        if ($domNode) this.$domNode = $domNode;\n        this._options = options;\n        this._defaultOptions = defaultOptions;\n        this._locks = locks;\n        // Avoid errors in browsers that lack a console.\n        if (!('console' in $.global)) $.global.console = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = this.constructor.consoleMethodNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var methodName = _step.value;\n\n                if (!(methodName in $.global.console)) $.global.console[methodName] = this.constructor.noop;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (!this.constructor._javaScriptDependentContentHandled && 'document' in $.global && 'filter' in $ && 'hide' in $ && 'show' in $) {\n            this.constructor._javaScriptDependentContentHandled = true;\n            $(this._defaultOptions.domNodeSelectorPrefix + ' ' + this._defaultOptions.domNode.hideJavaScriptEnabled).filter(function () {\n                return !$(this).data('javaScriptDependentContentHide');\n            }).data('javaScriptDependentContentHide', true).hide();\n            $(this._defaultOptions.domNodeSelectorPrefix + ' ' + this._defaultOptions.domNode.showJavaScriptEnabled).filter(function () {\n                return !$(this).data('javaScriptDependentContentShow');\n            }).data('javaScriptDependentContentShow', true).show();\n        }\n    }\n    /**\n     * This method could be overwritten normally. It acts like a destructor.\n     * @returns Returns the current instance.\n     */\n\n    // region static properties\n\n\n    _createClass(Tools, [{\n        key: 'destructor',\n        value: function destructor() {\n            if ('off' in $.fn) this.off('*');\n            return this;\n        }\n        /**\n         * This method should be overwritten normally. It is triggered if current\n         * object was created via the \"new\" keyword and is called now.\n         * @param options - An options object.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'initialize',\n        value: function initialize() {\n            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            /*\n                NOTE: We have to create a new options object instance to avoid\n                changing a static options object.\n            */\n            this._options = this.constructor.extendObject(true, {}, this._defaultOptions, this._options, options);\n            /*\n                The selector prefix should be parsed after extending options\n                because the selector would be overwritten otherwise.\n            */\n            this._options.domNodeSelectorPrefix = this.constructor.stringFormat(this._options.domNodeSelectorPrefix, this.constructor.stringCamelCaseToDelimited(this.constructor._name));\n            return this;\n        }\n        // / endregion\n        // / region object orientation\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * Defines a generic controller for dom node aware plugins.\n         * @param object - The object or class to control. If \"object\" is a class\n         * an instance will be generated.\n         * @param parameter - The initially given arguments object.\n         * @param $domNode - Optionally a $-extended dom node to use as reference.\n         * @returns Returns whatever the initializer method returns.\n         */\n\n    }, {\n        key: 'controller',\n        value: function controller(object, parameter) {\n            var $domNode = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            if (typeof object === 'function') {\n                object = new object($domNode);\n                if (!object instanceof Tools) object = this.constructor.extendObject(true, new Tools(), object);\n            }\n            parameter = this.constructor.arrayMake(parameter);\n            if ($domNode && 'data' in $domNode && !$domNode.data(object.constructor._name))\n                // Attach extended object to the associated dom node.\n                $domNode.data(object.constructor._name, object);\n            if (parameter[0] in object) return object[parameter[0]].apply(object, parameter.slice(1));else if (parameter.length === 0 || _typeof(parameter[0]) === 'object')\n                /*\n                    If an options object or no method name is given the initializer\n                    will be called.\n                */\n                return object.initialize.apply(object, parameter);\n            throw Error('Method \"' + parameter[0] + '\" does not exist on $-extended dom node ' + ('\"' + object.constructor._name + '\".'));\n        }\n        // / endregion\n        // / region mutual exclusion\n        /**\n         * Calling this method introduces a starting point for a critical area with\n         * potential race conditions. The area will be binded to given description\n         * string. So don't use same names for different areas.\n         * @param description - A short string describing the critical areas\n         * properties.\n         * @param callbackFunction - A procedure which should only be executed if\n         * the interpreter isn't in the given critical area. The lock description\n         * string will be given to the callback function.\n         * @param autoRelease - Release the lock after execution of given callback.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'acquireLock',\n        value: function acquireLock(description, callbackFunction) {\n            var _this = this;\n\n            var autoRelease = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n            var wrappedCallbackFunction = function wrappedCallbackFunction(description) {\n                callbackFunction(description);\n                if (autoRelease) _this.releaseLock(description);\n            };\n            if (this._locks.hasOwnProperty(description)) this._locks[description].push(wrappedCallbackFunction);else {\n                this._locks[description] = [];\n                wrappedCallbackFunction(description);\n            }\n            return this;\n        }\n        /**\n         * Calling this method  causes the given critical area to be finished and\n         * all functions given to \"this.acquireLock()\" will be executed in right\n         * order.\n         * @param description - A short string describing the critical areas\n         * properties.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'releaseLock',\n        value: function releaseLock(description) {\n            if (this._locks.hasOwnProperty(description)) if (this._locks[description].length) this._locks[description].shift()(description);else delete this._locks[description];\n            return this;\n        }\n        // / endregion\n        // / region boolean\n        /**\n         * Determines whether its argument represents a JavaScript number.\n         * @param object - Object to analyze.\n         * @returns A boolean value indicating whether given object is numeric\n         * like.\n         */\n\n    }, {\n        key: 'log',\n\n        // / endregion\n        // / region logging\n        /**\n         * Shows the given object's representation in the browsers console if\n         * possible or in a standalone alert-window as fallback.\n         * @param object - Any object to print.\n         * @param force - If set to \"true\" given input will be shown independently\n         * from current logging configuration or interpreter's console\n         * implementation.\n         * @param avoidAnnotation - If set to \"true\" given input has no module or\n         * log level specific annotations.\n         * @param level - Description of log messages importance.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n        value: function log(object) {\n            var force = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n            var avoidAnnotation = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var level = arguments.length <= 3 || arguments[3] === undefined ? 'info' : arguments[3];\n\n            if (this._options.logging || force || ['error', 'critical'].includes(level)) {\n                var message = void 0;\n                if (avoidAnnotation) message = object;else if (typeof object === 'string') {\n                    for (var _len = arguments.length, additionalArguments = Array(_len > 4 ? _len - 4 : 0), _key2 = 4; _key2 < _len; _key2++) {\n                        additionalArguments[_key2 - 4] = arguments[_key2];\n                    }\n\n                    additionalArguments.unshift(object);\n                    message = this.constructor._name + ' (' + level + '): ' + this.constructor.stringFormat.apply(this, additionalArguments);\n                } else if (this.constructor.isNumeric(object) || typeof object === 'boolean') message = this.constructor._name + ' (' + level + '): ' + object.toString();else {\n                    this.log(',--------------------------------------------,');\n                    this.log(object, force, true);\n                    this.log(\"'--------------------------------------------'\");\n                }\n                if (message) if (!('console' in $.global && level in $.global.console) || $.global.console[level] === this.constructor.noop) {\n                    if ('alert' in $.global) $.global.alert(message);\n                } else $.global.console[level](message);\n            }\n            return this;\n        }\n        /**\n         * Wrapper method for the native console method usually provided by\n         * interpreter.\n         * @param object - Any object to print.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'info',\n        value: function info(object) {\n            for (var _len2 = arguments.length, additionalArguments = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n                additionalArguments[_key3 - 1] = arguments[_key3];\n            }\n\n            // IgnoreTypeCheck\n            return this.log.apply(this, [object, false, false, 'info'].concat(additionalArguments));\n        }\n        /**\n         * Wrapper method for the native console method usually provided by\n         * interpreter.\n         * @param object - Any object to print.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'debug',\n        value: function debug(object) {\n            for (var _len3 = arguments.length, additionalArguments = Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {\n                additionalArguments[_key4 - 1] = arguments[_key4];\n            }\n\n            // IgnoreTypeCheck\n            return this.log.apply(this, [object, false, false, 'debug'].concat(additionalArguments));\n        }\n        /**\n         * Wrapper method for the native console method usually provided by\n         * interpreter.\n         * @param object - Any object to print.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'error',\n        value: function error(object) {\n            for (var _len4 = arguments.length, additionalArguments = Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {\n                additionalArguments[_key5 - 1] = arguments[_key5];\n            }\n\n            // IgnoreTypeCheck\n            return this.log.apply(this, [object, true, false, 'error'].concat(additionalArguments));\n        }\n        /**\n         * Wrapper method for the native console method usually provided by\n         * interpreter.\n         * @param object - Any object to print.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'critical',\n        value: function critical(object) {\n            for (var _len5 = arguments.length, additionalArguments = Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n                additionalArguments[_key6 - 1] = arguments[_key6];\n            }\n\n            // IgnoreTypeCheck\n            return this.log.apply(this, [object, true, false, 'warn'].concat(additionalArguments));\n        }\n        /**\n         * Wrapper method for the native console method usually provided by\n         * interpreter.\n         * @param object - Any object to print.\n         * @param additionalArguments - Additional arguments are used for string\n         * formating.\n         * @returns Returns the current instance.\n         */\n\n    }, {\n        key: 'warn',\n        value: function warn(object) {\n            for (var _len6 = arguments.length, additionalArguments = Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n                additionalArguments[_key7 - 1] = arguments[_key7];\n            }\n\n            // IgnoreTypeCheck\n            return this.log.apply(this, [object, false, false, 'warn'].concat(additionalArguments));\n        }\n        /**\n         * Dumps a given object in a human readable format.\n         * @param object - Any object to show.\n         * @param level - Number of levels to dig into given object recursively.\n         * @param currentLevel - Maximal number of recursive function calls to\n         * represent given object.\n         * @returns Returns the serialized version of given object.\n         */\n\n    }, {\n        key: 'getText',\n\n        // / endregion\n        // / region dom node\n        /**\n         * Get text content of current element without it children's text contents.\n         * @returns The text string.\n         */\n        value: function getText() {\n            return this.$domNode.clone().children().remove().end().text();\n        }\n        /**\n         * Normalizes class name order of current dom node.\n         * @returns Current instance.\n         */\n\n    }, {\n        key: 'normalizeClassNames',\n        value: function normalizeClassNames() {\n            this.$domNode.find('*').addBack().each(function () {\n                var $thisDomNode = $(this);\n                if ($thisDomNode.attr('class')) {\n                    var sortedClassNames = $thisDomNode.attr('class').split(' ').sort() || [];\n                    $thisDomNode.attr('class', '');\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = sortedClassNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var _className = _step2.value;\n\n                            $thisDomNode.addClass(_className);\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n                } else if ($thisDomNode.is('[class]')) $thisDomNode.removeAttr('class');\n            });\n            return this;\n        }\n        /**\n         * Normalizes style attributes order of current dom node.\n         * @returns Returns current instance.\n         */\n\n    }, {\n        key: 'normalizeStyles',\n        value: function normalizeStyles() {\n            var self = this;\n            this.$domNode.find('*').addBack().each(function () {\n                var $thisDomNode = $(this);\n                var serializedStyles = $thisDomNode.attr('style');\n                if (serializedStyles) {\n                    var sortedStyles = self.constructor.stringCompressStyleValue(serializedStyles).split(';').sort() || [];\n                    $thisDomNode.attr('style', '');\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                        for (var _iterator3 = sortedStyles[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                            var style = _step3.value;\n\n                            $thisDomNode.css.apply($thisDomNode, style.trim().split(':'));\n                        }\n                    } catch (err) {\n                        _didIteratorError3 = true;\n                        _iteratorError3 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n                        } finally {\n                            if (_didIteratorError3) {\n                                throw _iteratorError3;\n                            }\n                        }\n                    }\n\n                    $thisDomNode.attr('style', self.constructor.stringCompressStyleValue($thisDomNode.attr('style')));\n                } else if ($thisDomNode.is('[style]')) $thisDomNode.removeAttr('style');\n            });\n            return this;\n        }\n        /**\n         * Checks whether given html or text strings are equal.\n         * @param first - First html, selector to dom node or text to compare.\n         * @param second - Second html, selector to dom node  or text to compare.\n         * @param forceHTMLString - Indicates whether given contents are\n         * interpreted as html string (otherwise an automatic detection will be\n         * triggered).\n         * @returns Returns true if both dom representations are equivalent.\n         */\n\n    }, {\n        key: 'getPositionRelativeToViewport',\n\n        /**\n         * Determines where current dom node is relative to current view port\n         * position.\n         * @param delta - Allows deltas for \"top\", \"left\", \"bottom\" and \"right\" for\n         * determining positions.\n         * @returns Returns one of \"above\", \"left\", \"below\", \"right\" or \"in\".\n         */\n        value: function getPositionRelativeToViewport() {\n            var delta = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            delta = this.constructor.extendObject({ top: 0, left: 0, bottom: 0, right: 0 }, delta);\n            if ('window' in $.global && this.$domNode && this.$domNode.length && this.$domNode[0]) {\n                var $window = $($.global.window);\n                var rectangle = this.$domNode[0].getBoundingClientRect();\n                if (rectangle.top + delta.top < 0) return 'above';\n                if (rectangle.left + delta.left < 0) return 'left';\n                if ($window.height() < rectangle.bottom + delta.bottom) return 'below';\n                if ($window.width() < rectangle.right + delta.right) return 'right';\n            }\n            return 'in';\n        }\n        /**\n         * Generates a directive name corresponding selector string.\n         * @param directiveName - The directive name.\n         * @returns Returns generated selector.\n         */\n\n    }, {\n        key: 'removeDirective',\n\n        /**\n         * Removes a directive name corresponding class or attribute.\n         * @param directiveName - The directive name.\n         * @returns Returns current dom node.\n         */\n        value: function removeDirective(directiveName) {\n            var delimitedName = this.constructor.stringCamelCaseToDelimited(directiveName);\n            return this.$domNode.removeClass(delimitedName).removeAttr(delimitedName).removeAttr('data-' + delimitedName).removeAttr('x-' + delimitedName).removeAttr(delimitedName.replace('-', ':')).removeAttr(delimitedName.replace('-', '_'));\n        }\n        /**\n         * Determines a normalized camel case directive name representation.\n         * @param directiveName - The directive name.\n         * @returns Returns the corresponding name.\n         */\n\n    }, {\n        key: 'getDirectiveValue',\n\n        /**\n         * Determines a directive attribute value.\n         * @param directiveName - The directive name.\n         * @returns Returns the corresponding attribute value or \"null\" if no\n         * attribute value exists.\n         */\n        value: function getDirectiveValue(directiveName) {\n            var delimitedName = this.constructor.stringCamelCaseToDelimited(directiveName);\n            var _arr = [delimitedName, 'data-' + delimitedName, 'x-' + delimitedName, delimitedName.replace('-', '\\\\:')];\n            for (var _i = 0; _i < _arr.length; _i++) {\n                var _attributeName = _arr[_i];\n                var _value = this.$domNode.attr(_attributeName);\n                if (_value !== undefined) return _value;\n            }\n            return null;\n        }\n        /**\n         * Removes a selector prefix from a given selector. This methods searches\n         * in the options object for a given \"domNodeSelectorPrefix\".\n         * @param domNodeSelector - The dom node selector to slice.\n         * @returns Returns the sliced selector.\n         */\n\n    }, {\n        key: 'sliceDomNodeSelectorPrefix',\n        value: function sliceDomNodeSelectorPrefix(domNodeSelector) {\n            if ('domNodeSelectorPrefix' in this._options && domNodeSelector.startsWith(this._options.domNodeSelectorPrefix)) return domNodeSelector.substring(this._options.domNodeSelectorPrefix.length).trim();\n            return domNodeSelector;\n        }\n        /**\n         * Determines the dom node name of a given dom node string.\n         * @param domNodeSelector - A given to dom node selector to determine its\n         * name.\n         * @returns Returns The dom node name.\n         * @example\n         * // returns 'div'\n         * $.Tools.getDomNodeName('&lt;div&gt;')\n         * @example\n         * // returns 'div'\n         * $.Tools.getDomNodeName('&lt;div&gt;&lt;/div&gt;')\n         * @example\n         * // returns 'br'\n         * $.Tools.getDomNodeName('&lt;br/&gt;')\n         */\n\n    }, {\n        key: 'grabDomNode',\n\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * Converts an object of dom selectors to an array of $ wrapped dom nodes.\n         * Note if selector description as one of \"class\" or \"id\" as suffix element\n         * will be ignored.\n         * @param domNodeSelectors - An object with dom node selectors.\n         * @param wrapperDomNode - A dom node to be the parent or wrapper of all\n         * retrieved dom nodes.\n         * @returns Returns All $ wrapped dom nodes corresponding to given\n         * selectors.\n         */\n        value: function grabDomNode(domNodeSelectors, wrapperDomNode) {\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            var domNodes = {};\n            if (domNodeSelectors) if (wrapperDomNode) {\n                var $wrapperDomNode = $(wrapperDomNode);\n                for (var _name in domNodeSelectors) {\n                    if (domNodeSelectors.hasOwnProperty(_name)) domNodes[_name] = $wrapperDomNode.find(domNodeSelectors[_name]);\n                }\n            } else for (var _name2 in domNodeSelectors) {\n                if (domNodeSelectors.hasOwnProperty(_name2)) {\n                    var match = domNodeSelectors[_name2].match(', *');\n                    if (match) {\n                        var _iteratorNormalCompletion4 = true;\n                        var _didIteratorError4 = false;\n                        var _iteratorError4 = undefined;\n\n                        try {\n                            for (var _iterator4 = domNodeSelectors[_name2].split(match[0])[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                                var _selectorPart = _step4.value;\n\n                                domNodeSelectors[_name2] += ', ' + this.normalizeDomNodeSelector(_selectorPart);\n                            }\n                        } catch (err) {\n                            _didIteratorError4 = true;\n                            _iteratorError4 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                    _iterator4.return();\n                                }\n                            } finally {\n                                if (_didIteratorError4) {\n                                    throw _iteratorError4;\n                                }\n                            }\n                        }\n                    }domNodes[_name2] = $(this.normalizeDomNodeSelector(domNodeSelectors[_name2]));\n                }\n            }if (this._options.domNodeSelectorPrefix) domNodes.parent = $(this._options.domNodeSelectorPrefix);\n            if ('window' in $.global) domNodes.window = $($.global.window);\n            if ('document' in $.global) domNodes.document = $($.global.document);\n            return domNodes;\n        }\n        // / endregion\n        // / region scope\n        /**\n         * Overwrites all inherited variables from parent scope with \"undefined\".\n         * @param scope - A scope where inherited names will be removed.\n         * @param prefixesToIgnore - Name prefixes to ignore during deleting names\n         * in given scope.\n         * @returns The isolated scope.\n         */\n\n    }, {\n        key: 'getMethod',\n\n        // / endregion\n        // / region function\n        /**\n         * Methods given by this method has the plugin scope referenced with\n         * \"this\". Otherwise \"this\" usually points to the object the given method\n         * was attached to. If \"method\" doesn't match string arguments are passed\n         * through a wrapper function with \"context\" setted as \"scope\" or \"this\" if\n         * nothing is provided.\n         * @param method - A method name of given scope.\n         * @param scope - A given scope.\n         * @param additionalArguments - A list of additional arguments to forward\n         * to given function, when it should be called.\n         * @returns Returns the given methods return value.\n         */\n        value: function getMethod(method) {\n            for (var _len7 = arguments.length, additionalArguments = Array(_len7 > 2 ? _len7 - 2 : 0), _key8 = 2; _key8 < _len7; _key8++) {\n                additionalArguments[_key8 - 2] = arguments[_key8];\n            }\n\n            var scope = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n            /*\n                This following outcomment line would be responsible for a bug in\n                yuicompressor. Because of declaration of arguments the parser\n                things that arguments is a local variable and could be renamed. It\n                doesn't care about that the magic arguments object is necessary to\n                generate the arguments array in this context.\n                 var arguments = this.constructor.arrayMake(arguments)\n            */\n            if (!scope) scope = this;\n            if (typeof method === 'string' && (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object') return function () {\n                if (!scope[method] && typeof method === 'string') throw Error('Method \"' + method + '\" doesn\\'t exists in \"' + scope + '\".');\n                return scope[method].apply(scope, additionalArguments.concat(this.constructor.arrayMake(arguments)));\n            };\n            var self = this;\n            return function () {\n                // IgnoreTypeCheck\n                return method.apply(scope, self.constructor.arrayMake(arguments).concat(additionalArguments));\n            };\n        }\n        /**\n         * Implements the identity function.\n         * @param value - A value to return.\n         * @returns Returns the given value.\n         */\n\n    }, {\n        key: 'fireEvent',\n\n        /**\n         * Searches for internal event handler methods and runs them by default. In\n         * addition this method searches for a given event method by the options\n         * object. Additional arguments are forwarded to respective event\n         * functions.\n         * @param eventName - An event name.\n         * @param callOnlyOptionsMethod - Prevents from trying to call an internal\n         * event handler.\n         * @param scope - The scope from where the given event handler should be\n         * called.\n         * @param additionalArguments - Additional arguments to forward to\n         * corresponding event handlers.\n         * @returns - Returns \"true\" if an options event handler was called and\n         * \"false\" otherwise.\n         */\n        value: function fireEvent(eventName) {\n            var callOnlyOptionsMethod = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n            var scope = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];\n\n            var eventHandlerName = 'on' + this.constructor.stringCapitalize(eventName);\n\n            for (var _len8 = arguments.length, additionalArguments = Array(_len8 > 3 ? _len8 - 3 : 0), _key9 = 3; _key9 < _len8; _key9++) {\n                additionalArguments[_key9 - 3] = arguments[_key9];\n            }\n\n            if (!callOnlyOptionsMethod) if (eventHandlerName in scope) scope[eventHandlerName].apply(scope, additionalArguments);else if ('_' + eventHandlerName in scope) scope['_' + eventHandlerName].apply(scope, additionalArguments);\n            if (scope._options && eventHandlerName in scope._options) {\n                scope._options[eventHandlerName].apply(scope, additionalArguments);\n                return true;\n            }\n            return false;\n        }\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * A wrapper method for \"$.on()\". It sets current plugin name as event\n         * scope if no scope is given. Given arguments are modified and passed\n         * through \"$.on()\".\n         * @returns Returns $'s grabbed dom node.\n         */\n\n    }, {\n        key: 'on',\n        value: function on() {\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            return this._bindEventHelper(arguments, false);\n        }\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * A wrapper method fo \"$.off()\". It sets current plugin name as event\n         * scope if no scope is given. Given arguments are modified and passed\n         * through \"$.off()\".\n         * @returns Returns $'s grabbed dom node.\n         */\n\n    }, {\n        key: 'off',\n        value: function off() {\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            return this._bindEventHelper(arguments, true, 'off');\n        }\n        // / endregion\n        // / region object\n        /**\n         * Determine the internal JavaScript [[Class]] of an object.\n         * @param object - Object to analyze.\n         * @returns Name of determined class.\n         */\n\n    }, {\n        key: 'normalizeDomNodeSelector',\n\n        /**\n         * Converts a dom selector to a prefixed dom selector string.\n         * @param selector - A dom node selector.\n         * @returns Returns given selector prefixed.\n         */\n        value: function normalizeDomNodeSelector(selector) {\n            var domNodeSelectorPrefix = '';\n            if (this._options.domNodeSelectorPrefix) domNodeSelectorPrefix = this._options.domNodeSelectorPrefix + ' ';\n            if (!(selector.startsWith(domNodeSelectorPrefix) || selector.trim().startsWith('<'))) selector = domNodeSelectorPrefix + selector;\n            return selector.trim();\n        }\n        // / endregion\n        // / region number\n        /**\n         * Checks if given object is java scripts native \"Number.NaN\" object.\n         * @param object - Object to Check.\n         * @returns Returns whether given value is not a number or not.\n         */\n\n    }, {\n        key: 'sendToExternalURL',\n\n        /**\n         * Send given data to a temporary created iframe.\n         * @param url - URL to send to data to.\n         * @param data - Data holding object to send data to.\n         * @param requestType - The forms action attribute value. If nothing is\n         * provided \"post\" will be used as default.\n         * @param removeAfterLoad - Indicates if created iframe should be removed\n         * right after load event.\n         * @returns Returns the dynamically created iframe.\n         */\n        value: function sendToExternalURL(url, data) {\n            var requestType = arguments.length <= 2 || arguments[2] === undefined ? 'post' : arguments[2];\n            var removeAfterLoad = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n            var $iFrameDomNode = $('<iframe>').attr('name', this.constructor._name.charAt(0).toLowerCase() + this.constructor._name.substring(1) + new Date().getTime()).hide();\n            this.$domNode.after($iFrameDomNode);\n            return this.constructor.sendToIFrame($iFrameDomNode, url, data, requestType, removeAfterLoad);\n        }\n        // / endregion\n        // endregion\n        // region protected\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * Helper method for attach event handler methods and their event handler\n         * remove pendants.\n         * @param parameter - Arguments object given to methods like \"bind()\" or\n         * \"unbind()\".\n         * @param removeEvent - Indicates if \"unbind()\" or \"bind()\" was given.\n         * @param eventFunctionName - Name of function to wrap.\n         * @returns Returns $'s wrapped dom node.\n         */\n\n    }, {\n        key: '_bindEventHelper',\n        value: function _bindEventHelper(parameter) {\n            var removeEvent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n            var eventFunctionName = arguments.length <= 2 || arguments[2] === undefined ? 'on' : arguments[2];\n\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            var $domNode = $(parameter[0]);\n            if (this.constructor.determineType(parameter[1]) === 'object' && !removeEvent) {\n                for (var eventType in parameter[1]) {\n                    if (parameter[1].hasOwnProperty(eventType))\n                        // IgnoreTypeCheck\n                        this[eventFunctionName]($domNode, eventType, parameter[1][eventType]);\n                }return $domNode;\n            }\n            parameter = this.constructor.arrayMake(parameter).slice(1);\n            if (parameter.length === 0) parameter.push('');\n            if (!parameter[0].includes('.')) parameter[0] += '.' + this.constructor._name;\n            if (removeEvent) return $domNode[eventFunctionName].apply($domNode, parameter);\n            return $domNode[eventFunctionName].apply($domNode, parameter);\n        }\n        // endregion\n\n    }], [{\n        key: 'isNumeric',\n        value: function isNumeric(object) {\n            var type = Tools.determineType(object);\n            /*\n                NOTE: \"parseFloat\" \"NaNs\" numeric-cast false positives (\"\") but\n                misinterprets leading-number strings, particularly hex literals\n                (\"0x...\") subtraction forces infinities to NaN.\n            */\n            return ['number', 'string'].includes(type) && !isNaN(object - parseFloat(object));\n        }\n        /**\n         * Determine whether the argument is a window.\n         * @param object - Object to check for.\n         * @returns Boolean value indicating the result.\n         */\n\n    }, {\n        key: 'isWindow',\n        value: function isWindow(object) {\n            return ![undefined, null].includes(object) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && 'window' in object && object === object.window;\n        }\n        /**\n         * Checks if given object is similar to an array and can be handled like an\n         * array.\n         * @param object - Object to check behavior for.\n         * @returns A boolean value indicating whether given object is array like.\n         */\n\n    }, {\n        key: 'isArrayLike',\n        value: function isArrayLike(object) {\n            var length = void 0;\n            try {\n                length = Boolean(object) && 'length' in object && object.length;\n            } catch (error) {\n                return false;\n            }\n            var type = Tools.determineType(object);\n            if (type === 'function' || Tools.isWindow(object)) return false;\n            if (type === 'array' || length === 0) return true;\n            if (typeof length === 'number' && length > 0) try {\n                /* eslint-disable no-unused-expressions */\n                object[length - 1];\n                /* eslint-enable no-unused-expressions */\n                return true;\n            } catch (error) {}\n            return false;\n        }\n        /**\n         * Checks whether one of the given pattern matches given string.\n         * @param target - Target to check in pattern for.\n         * @param pattern - List of pattern to check for.\n         * @returns Value \"true\" if given object is matches by at leas one of the\n         * given pattern and \"false\" otherwise.\n         */\n\n    }, {\n        key: 'isAnyMatching',\n        value: function isAnyMatching(target, pattern) {\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = pattern[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var currentPattern = _step5.value;\n\n                    if (typeof currentPattern === 'string') {\n                        if (currentPattern === target) return true;\n                    } else if (currentPattern.test(target)) return true;\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            return false;\n        }\n        /**\n         * Checks whether given object is a plain native object.\n         * @param object - Object to check.\n         * @returns Value \"true\" if given object is a plain javaScript object and\n         * \"false\" otherwise.\n         */\n\n    }, {\n        key: 'isPlainObject',\n        value: function isPlainObject(object) {\n            return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && Object.getPrototypeOf(object) === Object.prototype;\n        }\n        /**\n         * Checks whether given object is a function.\n         * @param object - Object to check.\n         * @returns Value \"true\" if given object is a function and \"false\"\n         * otherwise.\n         */\n\n    }, {\n        key: 'isFunction',\n        value: function isFunction(object) {\n            return Boolean(object) && {}.toString.call(object) === '[object Function]';\n        }\n        // / endregion\n        // / region language fixes\n        /**\n         * This method fixes an ugly javaScript bug. If you add a mouseout event\n         * listener to a dom node the given handler will be called each time any\n         * dom node inside the observed dom node triggers a mouseout event. This\n         * methods guarantees that the given event handler is only called if the\n         * observed dom node was leaved.\n         * @param eventHandler - The mouse out event handler.\n         * @returns Returns the given function wrapped by the workaround logic.\n         */\n\n    }, {\n        key: 'mouseOutEventHandlerFix',\n        value: function mouseOutEventHandlerFix(eventHandler) {\n            var self = this;\n            return function (event) {\n                var relatedTarget = event.toElement;\n                if ('relatedTarget' in event) relatedTarget = event.relatedTarget;\n                while (relatedTarget && relatedTarget.tagName !== 'BODY') {\n                    if (relatedTarget === this) return;\n                    relatedTarget = relatedTarget.parentNode;\n                }\n                return eventHandler.apply(self, arguments);\n            };\n        }\n    }, {\n        key: 'show',\n        value: function show(object) {\n            var level = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];\n            var currentLevel = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var output = '';\n            if (Tools.determineType(object) === 'object') {\n                for (var _key10 in object) {\n                    if (object.hasOwnProperty(_key10)) {\n                        output += _key10.toString() + ': ';\n                        if (currentLevel <= level) output += Tools.show(object[_key10], level, currentLevel + 1);else output += '' + object[_key10];\n                        output += '\\n';\n                    }\n                }return output.trim();\n            }\n            output = ('' + object).trim();\n            return output + ' (Type: \"' + Tools.determineType(object) + '\")';\n        }\n    }, {\n        key: 'isEquivalentDom',\n        value: function isEquivalentDom(first, second) {\n            var forceHTMLString = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n            if (first === second) return true;\n            if (first && second) {\n                var detemermineHTMLPattern = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;\n                var inputs = { first: first, second: second };\n                var $domNodes = {\n                    first: $('<dummy>'), second: $('<dummy>')\n                };\n                /*\n                    NOTE: Assume that strings that start \"<\" and end with \">\" are\n                    markup and skip the more expensive regular expression check.\n                */\n                var _arr2 = ['first', 'second'];\n                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                    var type = _arr2[_i2];\n                    if (typeof inputs[type] === 'string' && (forceHTMLString || inputs[type].startsWith('<') && inputs[type].endsWith('>') && inputs[type].length >= 3 || detemermineHTMLPattern.test(inputs[type]))) $domNodes[type] = $('<div>' + inputs[type] + '</div>');else try {\n                        var $selectedDomNode = $(inputs[type]);\n                        if ($selectedDomNode.length) $domNodes[type] = $('<div>').append($selectedDomNode.clone());else return false;\n                    } catch (error) {\n                        return false;\n                    }\n                }if ($domNodes.first.length && $domNodes.first.length === $domNodes.second.length) {\n                    $domNodes.first = $domNodes.first.Tools('normalizeClassNames').$domNode.Tools('normalizeStyles').$domNode;\n                    $domNodes.second = $domNodes.second.Tools('normalizeClassNames').$domNode.Tools('normalizeStyles').$domNode;\n                    var index = 0;\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                        for (var _iterator6 = $domNodes.first[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                            var _domNode = _step6.value;\n\n                            if (!_domNode.isEqualNode($domNodes.second[index])) return false;\n                        }\n                    } catch (err) {\n                        _didIteratorError6 = true;\n                        _iteratorError6 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                _iterator6.return();\n                            }\n                        } finally {\n                            if (_didIteratorError6) {\n                                throw _iteratorError6;\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'generateDirectiveSelector',\n        value: function generateDirectiveSelector(directiveName) {\n            var delimitedName = Tools.stringCamelCaseToDelimited(directiveName);\n            return delimitedName + ', .' + delimitedName + ', [' + delimitedName + '], ' + ('[data-' + delimitedName + '], [x-' + delimitedName + ']') + (delimitedName.includes('-') ? ', [' + delimitedName.replace(/-/g, '\\\\:') + '], ' + ('[' + delimitedName.replace(/-/g, '_') + ']') : '');\n        }\n    }, {\n        key: 'getNormalizedDirectiveName',\n        value: function getNormalizedDirectiveName(directiveName) {\n            var _arr3 = ['-', ':', '_'];\n\n            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n                var delimiter = _arr3[_i3];\n                var prefixFound = false;\n                var _arr5 = ['data' + delimiter, 'x' + delimiter];\n                for (var _i5 = 0; _i5 < _arr5.length; _i5++) {\n                    var prefix = _arr5[_i5];\n                    if (directiveName.startsWith(prefix)) {\n                        directiveName = directiveName.substring(prefix.length);\n                        prefixFound = true;\n                        break;\n                    }\n                }if (prefixFound) break;\n            }\n            var _arr4 = ['-', ':', '_'];\n            for (var _i4 = 0; _i4 < _arr4.length; _i4++) {\n                var _delimiter = _arr4[_i4];\n                directiveName = Tools.stringDelimitedToCamelCase(directiveName, _delimiter);\n            }return directiveName;\n        }\n    }, {\n        key: 'getDomNodeName',\n        value: function getDomNodeName(domNodeSelector) {\n            var match = domNodeSelector.match(new RegExp('^<?([a-zA-Z]+).*>?.*'));\n            if (match) return match[1];\n            return null;\n        }\n    }, {\n        key: 'isolateScope',\n        value: function isolateScope(scope) {\n            var prefixesToIgnore = arguments.length <= 1 || arguments[1] === undefined ? ['$', '_'] : arguments[1];\n\n            for (var _name3 in scope) {\n                if (!(prefixesToIgnore.includes(_name3.charAt(0)) || ['this', 'constructor'].includes(_name3) || scope.hasOwnProperty(_name3)))\n                    /*\n                        NOTE: Delete (\"delete $scope[name]\") doesn't destroy the\n                        automatic lookup to parent scope.\n                    */\n                    scope[_name3] = undefined;\n            }return scope;\n        }\n        /**\n         * Generates a unique name in given scope (usefull for jsonp requests).\n         * @param prefix - A prefix which will be preprended to uniqe name.\n         * @param suffix - A suffix which will be preprended to uniqe name.\n         * @param scope - A scope where the name should be unique.\n         * @param initialUniqueName - An initial scope name to use if not exists.\n         * @returns The function name.\n         */\n\n    }, {\n        key: 'determineUniqueScopeName',\n        value: function determineUniqueScopeName() {\n            var prefix = arguments.length <= 0 || arguments[0] === undefined ? 'callback' : arguments[0];\n            var suffix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n            var scope = arguments.length <= 2 || arguments[2] === undefined ? $.global : arguments[2];\n            var initialUniqueName = arguments.length <= 3 || arguments[3] === undefined ? '' : arguments[3];\n\n            if (initialUniqueName.length && !(initialUniqueName in scope)) return initialUniqueName;\n            var uniqueName = prefix + suffix;\n            while (true) {\n                uniqueName = prefix + parseInt(Math.random() * Math.pow(10, 10), 10) + suffix;\n                if (!(uniqueName in scope)) break;\n            }\n            return uniqueName;\n        }\n    }, {\n        key: 'identity',\n        value: function identity(value) {\n            return value;\n        }\n        /**\n         * Inverted filter helper to inverse each given filter.\n         * @param filter - A function that filters an array.\n         * @returns The inverted filter.\n         */\n\n    }, {\n        key: 'invertArrayFilter',\n        value: function invertArrayFilter(filter) {\n            return function (data) {\n                if (data) {\n                    var filteredData = filter.apply(this, arguments);\n                    var result = [];\n                    /* eslint-disable curly */\n                    if (filteredData.length) {\n                        var _iteratorNormalCompletion7 = true;\n                        var _didIteratorError7 = false;\n                        var _iteratorError7 = undefined;\n\n                        try {\n                            for (var _iterator7 = data[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                                var date = _step7.value;\n\n                                if (!filteredData.includes(date)) result.push(date);\n                            }\n                        } catch (err) {\n                            _didIteratorError7 = true;\n                            _iteratorError7 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                                    _iterator7.return();\n                                }\n                            } finally {\n                                if (_didIteratorError7) {\n                                    throw _iteratorError7;\n                                }\n                            }\n                        }\n                    } else\n                        /* eslint-enable curly */\n                        result = data;\n                    return result;\n                }\n                return data;\n            };\n        }\n        // / endregion\n        // / region event\n        /**\n         * Prevents event functions from triggering to often by defining a minimal\n         * span between each function call. Additional arguments given to this\n         * function will be forwarded to given event function call. The function\n         * wrapper returns null if current function will be omitted due to\n         * debounceing.\n         * @param eventFunction - The function to call debounced.\n         * @param thresholdInMilliseconds - The minimum time span between each\n         * function call.\n         * @param additionalArguments - Additional arguments to forward to given\n         * function.\n         * @returns Returns the wrapped method.\n         */\n\n    }, {\n        key: 'debounce',\n        value: function debounce(eventFunction) {\n            for (var _len9 = arguments.length, additionalArguments = Array(_len9 > 2 ? _len9 - 2 : 0), _key11 = 2; _key11 < _len9; _key11++) {\n                additionalArguments[_key11 - 2] = arguments[_key11];\n            }\n\n            var thresholdInMilliseconds = arguments.length <= 1 || arguments[1] === undefined ? 600 : arguments[1];\n\n            var lock = false;\n            var waitingCallArguments = null;\n            var timeoutID = null;\n            return function () {\n                var _this2 = this;\n\n                var parameter = Tools.arrayMake(arguments);\n                if (lock) waitingCallArguments = parameter.concat(additionalArguments || []);else {\n                    lock = true;\n                    timeoutID = setTimeout(function () {\n                        lock = false;\n                        if (waitingCallArguments) {\n                            eventFunction.apply(_this2, waitingCallArguments);\n                            waitingCallArguments = null;\n                        }\n                    }, thresholdInMilliseconds);\n                    eventFunction.apply(this, parameter.concat(additionalArguments || []));\n                }\n                return timeoutID;\n            };\n        }\n    }, {\n        key: 'determineType',\n        value: function determineType() {\n            var object = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n            if ([undefined, null].includes(object)) return '' + object;\n            if (['object', 'function'].includes(typeof object === 'undefined' ? 'undefined' : _typeof(object)) && 'toString' in object) {\n                var stringRepresentation = Tools.classToTypeMapping.toString.call(object);\n                if (Tools.classToTypeMapping.hasOwnProperty(stringRepresentation)) return Tools.classToTypeMapping[stringRepresentation];\n            }\n            return typeof object === 'undefined' ? 'undefined' : _typeof(object);\n        }\n        /**\n         * Replaces given pattern in each value in given object recursively with\n         * given string replacement.\n         * @param object - Object to convert substrings in.\n         * @param pattern - Regular expression to replace.\n         * @param replacement - String to use as replacement for found patterns.\n         * @returns Converted object with replaced patterns.\n         */\n\n    }, {\n        key: 'convertSubstringInPlainObject',\n        value: function convertSubstringInPlainObject(object, pattern, replacement) {\n            for (var _key12 in object) {\n                if (object.hasOwnProperty(_key12)) if (Tools.isPlainObject(object[_key12])) object[_key12] = Tools.convertSubstringInPlainObject(object[_key12], pattern, replacement);else if (typeof object[_key12] === 'string') object[_key12] = object[_key12].replace(pattern, replacement);\n            }return object;\n        }\n        /**\n         * Modifies given target corresponding to given source and removes source\n         * modification infos.\n         * @param target - Object to modify.\n         * @param source - Source object to load modifications from.\n         * @param removeIndicatorKey - Indicator property name or value to mark a\n         * value to remove from object or list.\n         * @param prependIndicatorKey - Indicator property name to mark a value to\n         * prepend to target list.\n         * @param appendIndicatorKey - Indicator property name to mark a value to\n         * append to target list.\n         * @param parentSource - Source context to remove modification info from\n         * (usually only needed internally).\n         * @param parentKey - Source key in given source context to remove\n         * modification info from (usually only needed internally).\n         * @return Given target modified with given source.\n         */\n\n    }, {\n        key: 'modifyObject',\n        value: function modifyObject(target, source) {\n            var removeIndicatorKey = arguments.length <= 2 || arguments[2] === undefined ? '__remove__' : arguments[2];\n            var prependIndicatorKey = arguments.length <= 3 || arguments[3] === undefined ? '__prepend__' : arguments[3];\n            var appendIndicatorKey = arguments.length <= 4 || arguments[4] === undefined ? '__append__' : arguments[4];\n            var parentSource = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];\n            var parentKey = arguments.length <= 6 || arguments[6] === undefined ? null : arguments[6];\n\n            if (source instanceof Map && target instanceof Map) {\n                var _iteratorNormalCompletion8 = true;\n                var _didIteratorError8 = false;\n                var _iteratorError8 = undefined;\n\n                try {\n                    for (var _iterator8 = source[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                        var _step8$value = _slicedToArray(_step8.value, 2);\n\n                        var _key13 = _step8$value[0];\n                        var _value2 = _step8$value[1];\n\n                        if (target.has(_key13)) Tools.modifyObject(target.get(_key13), _value2, removeIndicatorKey, prependIndicatorKey, appendIndicatorKey, source, _key13);\n                    }\n                } catch (err) {\n                    _didIteratorError8 = true;\n                    _iteratorError8 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                            _iterator8.return();\n                        }\n                    } finally {\n                        if (_didIteratorError8) {\n                            throw _iteratorError8;\n                        }\n                    }\n                }\n            } else if (source !== null && (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' && target !== null && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object') {\n                for (var _key14 in source) {\n                    if (source.hasOwnProperty(_key14)) if ([removeIndicatorKey, prependIndicatorKey, appendIndicatorKey].includes(_key14)) {\n                        var _iteratorNormalCompletion9 = true;\n                        var _didIteratorError9 = false;\n                        var _iteratorError9 = undefined;\n\n                        try {\n                            for (var _iterator9 = [].concat(source[_key14])[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                                var valueToModify = _step9.value;\n\n                                if (Array.isArray(target)) {\n                                    if (_key14 === removeIndicatorKey) {\n                                        if (target.includes(valueToModify)) target.splice(target.indexOf(valueToModify), 1);\n                                    } else if (_key14 === prependIndicatorKey) target.unshift(valueToModify);else target.push(valueToModify);\n                                } else if (_key14 === removeIndicatorKey && target.hasOwnProperty(valueToModify)) delete target[valueToModify];\n                            }\n                        } catch (err) {\n                            _didIteratorError9 = true;\n                            _iteratorError9 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                                    _iterator9.return();\n                                }\n                            } finally {\n                                if (_didIteratorError9) {\n                                    throw _iteratorError9;\n                                }\n                            }\n                        }\n\n                        delete source[_key14];\n                        if (parentSource && parentKey) delete parentSource[parentKey];\n                    } else if (target !== null && target.hasOwnProperty(_key14)) Tools.modifyObject(target[_key14], source[_key14], removeIndicatorKey, prependIndicatorKey, appendIndicatorKey, source, _key14);\n                }\n            }\n            return target;\n        }\n        /**\n         * Extends given target object with given sources object. As target and\n         * sources many expandable types are allowed but target and sources have to\n         * to come from the same type.\n         * @param targetOrDeepIndicator - Maybe the target or deep indicator.\n         * @param _targetAndOrSources - Target and at least one source object.\n         * @returns Returns given target extended with all given sources.\n         */\n\n    }, {\n        key: 'extendObject',\n        value: function extendObject(targetOrDeepIndicator) {\n            for (var _len10 = arguments.length, _targetAndOrSources = Array(_len10 > 1 ? _len10 - 1 : 0), _key15 = 1; _key15 < _len10; _key15++) {\n                _targetAndOrSources[_key15 - 1] = arguments[_key15];\n            }\n\n            var index = 1;\n            var deep = false;\n            var target = void 0;\n            if (typeof targetOrDeepIndicator === 'boolean') {\n                // Handle a deep copy situation and skip deep indicator and target.\n                deep = targetOrDeepIndicator;\n                target = arguments[index];\n                index = 2;\n            } else target = targetOrDeepIndicator;\n            var mergeValue = function mergeValue(key, value, targetValue) {\n                if (value === targetValue) return targetValue;\n                // Recurse if we're merging plain objects or maps.\n                if (deep && value && (Tools.isPlainObject(value) || value instanceof Map)) {\n                    var clone = void 0;\n                    if (value instanceof Map) clone = targetValue && targetValue instanceof Map ? targetValue : new Map();else clone = targetValue && Tools.isPlainObject(targetValue) ? targetValue : {};\n                    return Tools.extendObject(deep, clone, value);\n                }\n                return value;\n            };\n            while (index < arguments.length) {\n                var source = arguments[index];\n                var targetType = typeof target === 'undefined' ? 'undefined' : _typeof(target);\n                var sourceType = typeof source === 'undefined' ? 'undefined' : _typeof(source);\n                if (target instanceof Map) targetType += ' Map';\n                if (source instanceof Map) sourceType += ' Map';\n                if (targetType === sourceType && target !== source) {\n                    if (target instanceof Map && source instanceof Map) {\n                        var _iteratorNormalCompletion10 = true;\n                        var _didIteratorError10 = false;\n                        var _iteratorError10 = undefined;\n\n                        try {\n                            for (var _iterator10 = source[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                                var _step10$value = _slicedToArray(_step10.value, 2);\n\n                                var _key16 = _step10$value[0];\n                                var _value3 = _step10$value[1];\n\n                                target.set(_key16, mergeValue(_key16, _value3, target.get(_key16)));\n                            }\n                        } catch (err) {\n                            _didIteratorError10 = true;\n                            _iteratorError10 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                                    _iterator10.return();\n                                }\n                            } finally {\n                                if (_didIteratorError10) {\n                                    throw _iteratorError10;\n                                }\n                            }\n                        }\n                    } else if (target !== null && !Array.isArray(target) && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && source !== null && !Array.isArray(source) && (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object') {\n                        for (var _key17 in source) {\n                            if (source.hasOwnProperty(_key17)) target[_key17] = mergeValue(_key17, source[_key17], target[_key17]);\n                        }\n                    } else target = source;\n                } else target = source;\n                index += 1;\n            }\n            return target;\n        }\n        /**\n         * Removes a proxies from given data structure recursivley.\n         * @param object - Object to proxy.\n         * @param seenObjects - Tracks all already processed obejcts to avoid\n         * endless loops (usually only needed for internal prupose).\n         * @returns Returns given object unwrapped from a dynamic proxy.\n         */\n\n    }, {\n        key: 'unwrapProxy',\n        value: function unwrapProxy(object) {\n            var seenObjects = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n            if (object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {\n                while (object.__target__) {\n                    object = object.__target__;\n                }var index = seenObjects.indexOf(object);\n                if (index !== -1) return seenObjects[index];\n                seenObjects.push(object);\n                if (Array.isArray(object)) {\n                    var _index = 0;\n                    var _iteratorNormalCompletion11 = true;\n                    var _didIteratorError11 = false;\n                    var _iteratorError11 = undefined;\n\n                    try {\n                        for (var _iterator11 = object[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                            var _value4 = _step11.value;\n\n                            object[_index] = Tools.unwrapProxy(_value4, seenObjects);\n                            _index += 1;\n                        }\n                    } catch (err) {\n                        _didIteratorError11 = true;\n                        _iteratorError11 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                                _iterator11.return();\n                            }\n                        } finally {\n                            if (_didIteratorError11) {\n                                throw _iteratorError11;\n                            }\n                        }\n                    }\n                } else if (object instanceof Map) {\n                    var _iteratorNormalCompletion12 = true;\n                    var _didIteratorError12 = false;\n                    var _iteratorError12 = undefined;\n\n                    try {\n                        for (var _iterator12 = object[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                            var _step12$value = _slicedToArray(_step12.value, 2);\n\n                            var _key18 = _step12$value[0];\n                            var _value5 = _step12$value[1];\n\n                            object.set(_key18, Tools.unwrapProxy(_value5, seenObjects));\n                        }\n                    } catch (err) {\n                        _didIteratorError12 = true;\n                        _iteratorError12 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                                _iterator12.return();\n                            }\n                        } finally {\n                            if (_didIteratorError12) {\n                                throw _iteratorError12;\n                            }\n                        }\n                    }\n                } else for (var _key19 in object) {\n                    if (object.hasOwnProperty(_key19)) object[_key19] = Tools.unwrapProxy(object[_key19], seenObjects);\n                }\n            }\n            return object;\n        }\n        /**\n         * Adds dynamic getter and setter to any given data structure such as maps.\n         * @param object - Object to proxy.\n         * @param getterWrapper - Function to wrap each property get.\n         * @param setterWrapper - Function to wrap each property set.\n         * @param getterMethodName - Method name to get a stored value by key.\n         * @param setterMethodName - Method name to set a stored value by key.\n         * @param containesMethodName - Method name to indicate if a key is stored\n         * in given data structure.\n         * @param deep - Indicates to perform a deep wrapping of specified types.\n         * performed via \"value instanceof type\".).\n         * @param typesToExtend - Types which should be extended (Checks are\n         * performed via \"value instanceof type\".).\n         * @returns Returns given object wrapped with a dynamic getter proxy.\n         */\n\n    }, {\n        key: 'addDynamicGetterAndSetter',\n        value: function addDynamicGetterAndSetter(object) {\n            var getterWrapper = arguments.length <= 1 || arguments[1] === undefined ? function (value) {\n                return value;\n            } : arguments[1];\n            var setterWrapper = arguments.length <= 2 || arguments[2] === undefined ? function (key, value) {\n                return value;\n            } : arguments[2];\n            var getterMethodName = arguments.length <= 3 || arguments[3] === undefined ? '[]' : arguments[3];\n            var setterMethodName = arguments.length <= 4 || arguments[4] === undefined ? '[]' : arguments[4];\n            var containesMethodName = arguments.length <= 5 || arguments[5] === undefined ? 'hasOwnProperty' : arguments[5];\n            var deep = arguments.length <= 6 || arguments[6] === undefined ? true : arguments[6];\n            var typesToExtend = arguments.length <= 7 || arguments[7] === undefined ? [Object] : arguments[7];\n\n            if (deep) if (object instanceof Map) {\n                var _iteratorNormalCompletion13 = true;\n                var _didIteratorError13 = false;\n                var _iteratorError13 = undefined;\n\n                try {\n                    for (var _iterator13 = object[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                        var _step13$value = _slicedToArray(_step13.value, 2);\n\n                        var _key20 = _step13$value[0];\n                        var _value6 = _step13$value[1];\n\n                        object.set(_key20, Tools.addDynamicGetterAndSetter(_value6, getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend));\n                    }\n                } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                            _iterator13.return();\n                        }\n                    } finally {\n                        if (_didIteratorError13) {\n                            throw _iteratorError13;\n                        }\n                    }\n                }\n            } else if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null) {\n                for (var _key21 in object) {\n                    if (object.hasOwnProperty(_key21)) object[_key21] = Tools.addDynamicGetterAndSetter(object[_key21], getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend);\n                }\n            } else if (Array.isArray(object)) {\n                var index = 0;\n                var _iteratorNormalCompletion14 = true;\n                var _didIteratorError14 = false;\n                var _iteratorError14 = undefined;\n\n                try {\n                    for (var _iterator14 = object[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                        var _value7 = _step14.value;\n\n                        object[index] = Tools.addDynamicGetterAndSetter(_value7, getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend);\n                        index += 1;\n                    }\n                } catch (err) {\n                    _didIteratorError14 = true;\n                    _iteratorError14 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                            _iterator14.return();\n                        }\n                    } finally {\n                        if (_didIteratorError14) {\n                            throw _iteratorError14;\n                        }\n                    }\n                }\n            }\n            var _iteratorNormalCompletion15 = true;\n            var _didIteratorError15 = false;\n            var _iteratorError15 = undefined;\n\n            try {\n                for (var _iterator15 = typesToExtend[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                    var type = _step15.value;\n\n                    if (object instanceof type) {\n                        if (object.__target__) return object;\n                        var handler = {};\n                        if (containesMethodName) handler.has = function (target, name) {\n                            if (containesMethodName === '[]') return name in target;\n                            return target[containesMethodName](name);\n                        };\n                        if (containesMethodName && getterMethodName) handler.get = function (target, name) {\n                            if (name === '__target__') return target;\n                            if (typeof target[name] === 'function') return target[name].bind(target);\n                            if (target[containesMethodName](name)) {\n                                if (getterMethodName === '[]') return getterWrapper(target[name]);\n                                return getterWrapper(target[getterMethodName](name));\n                            }\n                            return target[name];\n                        };\n                        if (setterMethodName) handler.set = function (target, name, value) {\n                            if (setterMethodName === '[]') target[name] = setterWrapper(name, value);else target[setterMethodName](name, setterWrapper(name, value));\n                        };\n                        // IgnoreTypeCheck\n                        return new Proxy(object, handler);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError15 = true;\n                _iteratorError15 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                        _iterator15.return();\n                    }\n                } finally {\n                    if (_didIteratorError15) {\n                        throw _iteratorError15;\n                    }\n                }\n            }\n\n            return object;\n        }\n        /**\n         * Searches for nested mappings with given indicator key and resolves\n         * marked values. Additionally all objects are wrapped with a proxy to\n         * dynamically resolve nested properties.\n         * @param object - Given mapping to resolve.\n         * @param parameterDescription - Array of scope names.\n         * @param parameter - Array of values for given scope names. If there is\n         * one missing given object will be added.\n         * @param deep - Indicates whether to perform a recursive resolving.\n         * @param evaluationIndicatorKey - Indicator property name to mark a value\n         * to evaluate.\n         * @param executionIndicatorKey - Indicator property name to mark a value\n         * to evaluate.\n         * @returns Evaluated given mapping.\n         */\n\n    }, {\n        key: 'resolveDynamicDataStructure',\n        value: function resolveDynamicDataStructure(object) {\n            var parameterDescription = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n            var parameter = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n            var deep = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n            var evaluationIndicatorKey = arguments.length <= 4 || arguments[4] === undefined ? '__evaluate__' : arguments[4];\n            var executionIndicatorKey = arguments.length <= 5 || arguments[5] === undefined ? '__execute__' : arguments[5];\n\n            if (object === null || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') return object;\n            var configuration = object;\n            if (deep && configuration && !configuration.__target__) configuration = Tools.addDynamicGetterAndSetter(Tools.copyLimitedRecursively(object), function (value) {\n                return Tools.resolveDynamicDataStructure(value, parameterDescription, parameter, false, evaluationIndicatorKey, executionIndicatorKey);\n            }, function (key, value) {\n                return value;\n            }, '[]', '');\n            if (parameterDescription.length > parameter.length) parameter.push(configuration);\n            if (Array.isArray(object) && deep) {\n                var index = 0;\n                var _iteratorNormalCompletion16 = true;\n                var _didIteratorError16 = false;\n                var _iteratorError16 = undefined;\n\n                try {\n                    for (var _iterator16 = object[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n                        var _value8 = _step16.value;\n\n                        object[index] = Tools.resolveDynamicDataStructure(_value8, parameterDescription, parameter, deep, evaluationIndicatorKey, executionIndicatorKey);\n                        index += 1;\n                    }\n                } catch (err) {\n                    _didIteratorError16 = true;\n                    _iteratorError16 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                            _iterator16.return();\n                        }\n                    } finally {\n                        if (_didIteratorError16) {\n                            throw _iteratorError16;\n                        }\n                    }\n                }\n            } else for (var _key22 in object) {\n                if (object.hasOwnProperty(_key22)) if ([evaluationIndicatorKey, executionIndicatorKey].includes(_key22)) try {\n                    return Tools.resolveDynamicDataStructure(new (\n                    // IgnoreTypeCheck\n                    Function.prototype.bind.apply(Function, [null].concat(parameterDescription).concat((_key22 === evaluationIndicatorKey ? 'return ' : '') + object[_key22])))().apply(null, parameter), parameterDescription, parameter, false, evaluationIndicatorKey, executionIndicatorKey);\n                } catch (error) {\n                    throw Error('Error during ' + (_key22 === evaluationIndicatorKey ? 'executing' : 'evaluating') + (' \"' + object[_key22] + '\": ' + error));\n                } else if (deep) object[_key22] = Tools.resolveDynamicDataStructure(object[_key22], parameterDescription, parameter, deep, evaluationIndicatorKey, executionIndicatorKey);\n            }return object;\n        }\n        /**\n         * Converts given object into its serialized json representation by\n         * replacing circular references with a given provided value.\n         * @param object - Object to serialize.\n         * @param determineCicularReferenceValue - Callback to create a fallback\n         * value depending on given redundant value.\n         * @param numberOfSpaces - Number of spaces to use for string formatting.\n         */\n\n    }, {\n        key: 'convertCircularObjectToJSON',\n        value: function convertCircularObjectToJSON(object) {\n            var determineCicularReferenceValue = arguments.length <= 1 || arguments[1] === undefined ? function () {\n                return '__circularReference__';\n            } : arguments[1];\n            var numberOfSpaces = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var seenObjects = [];\n            return JSON.stringify(object, function (key, value) {\n                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null) {\n                    if (seenObjects.includes(value)) return determineCicularReferenceValue(key, value, seenObjects);\n                    seenObjects.push(value);\n                    return value;\n                }\n                return value;\n            }, numberOfSpaces);\n        }\n        /**\n         * Converts given plain object and all nested found objects to\n         * corresponding map.\n         * @param object - Object to convert to.\n         * @param deep - Indicates whether to perform a recursive conversion.\n         * @returns Given object as map.\n         */\n\n    }, {\n        key: 'convertPlainObjectToMap',\n        value: function convertPlainObjectToMap(object) {\n            var deep = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n            if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && Tools.isPlainObject(object)) {\n                var newObject = new Map();\n                for (var _key23 in object) {\n                    if (object.hasOwnProperty(_key23)) {\n                        if (deep) object[_key23] = Tools.convertPlainObjectToMap(object[_key23], deep);\n                        newObject.set(_key23, object[_key23]);\n                    }\n                }return newObject;\n            }\n            if (deep) if (Array.isArray(object)) {\n                var index = 0;\n                var _iteratorNormalCompletion17 = true;\n                var _didIteratorError17 = false;\n                var _iteratorError17 = undefined;\n\n                try {\n                    for (var _iterator17 = object[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                        var _value9 = _step17.value;\n\n                        object[index] = Tools.convertPlainObjectToMap(_value9, deep);\n                        index += 1;\n                    }\n                } catch (err) {\n                    _didIteratorError17 = true;\n                    _iteratorError17 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                            _iterator17.return();\n                        }\n                    } finally {\n                        if (_didIteratorError17) {\n                            throw _iteratorError17;\n                        }\n                    }\n                }\n            } else if (object instanceof Map) {\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                    for (var _iterator18 = object[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                        var _step18$value = _slicedToArray(_step18.value, 2);\n\n                        var _key24 = _step18$value[0];\n                        var _value10 = _step18$value[1];\n\n                        object.set(_key24, Tools.convertPlainObjectToMap(_value10, deep));\n                    }\n                } catch (err) {\n                    _didIteratorError18 = true;\n                    _iteratorError18 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                            _iterator18.return();\n                        }\n                    } finally {\n                        if (_didIteratorError18) {\n                            throw _iteratorError18;\n                        }\n                    }\n                }\n            }\n            return object;\n        }\n        /**\n         * Converts given map and all nested found maps objects to corresponding\n         * object.\n         * @param object - Map to convert to.\n         * @param deep - Indicates whether to perform a recursive conversion.\n         * @returns Given map as object.\n         */\n\n    }, {\n        key: 'convertMapToPlainObject',\n        value: function convertMapToPlainObject(object) {\n            var deep = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n            if (object instanceof Map) {\n                var newObject = {};\n                var _iteratorNormalCompletion19 = true;\n                var _didIteratorError19 = false;\n                var _iteratorError19 = undefined;\n\n                try {\n                    for (var _iterator19 = object[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var _step19$value = _slicedToArray(_step19.value, 2);\n\n                        var _key25 = _step19$value[0];\n                        var _value11 = _step19$value[1];\n\n                        if (deep) _value11 = Tools.convertMapToPlainObject(_value11, deep);\n                        newObject['' + _key25] = _value11;\n                    }\n                } catch (err) {\n                    _didIteratorError19 = true;\n                    _iteratorError19 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                            _iterator19.return();\n                        }\n                    } finally {\n                        if (_didIteratorError19) {\n                            throw _iteratorError19;\n                        }\n                    }\n                }\n\n                return newObject;\n            }\n            if (deep) if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && Tools.isPlainObject(object)) {\n                for (var _key26 in object) {\n                    if (object.hasOwnProperty(_key26)) object[_key26] = Tools.convertMapToPlainObject(object[_key26], deep);\n                }\n            } else if (Array.isArray(object)) {\n                var index = 0;\n                var _iteratorNormalCompletion20 = true;\n                var _didIteratorError20 = false;\n                var _iteratorError20 = undefined;\n\n                try {\n                    for (var _iterator20 = object[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n                        var _value12 = _step20.value;\n\n                        object[index] = Tools.convertMapToPlainObject(_value12, deep);\n                        index += 1;\n                    }\n                } catch (err) {\n                    _didIteratorError20 = true;\n                    _iteratorError20 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion20 && _iterator20.return) {\n                            _iterator20.return();\n                        }\n                    } finally {\n                        if (_didIteratorError20) {\n                            throw _iteratorError20;\n                        }\n                    }\n                }\n            }\n            return object;\n        }\n        /**\n         * Iterates given objects own properties in sorted fashion. For\n         * each key value pair given iterator function will be called with\n         * value and key as arguments.\n         * @param object - Object to iterate.\n         * @param iterator - Function to execute for each key value pair. Value\n         * will be the first and key will be the second argument.\n         * @param context - The \"this\" binding for given iterator function.\n         * @returns List of given sorted keys.\n         */\n\n    }, {\n        key: 'forEachSorted',\n        value: function forEachSorted(object, iterator, context) {\n            var keys = Tools.sort(object);\n            var _iteratorNormalCompletion21 = true;\n            var _didIteratorError21 = false;\n            var _iteratorError21 = undefined;\n\n            try {\n                for (var _iterator21 = keys[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n                    var _key27 = _step21.value;\n\n                    if (object instanceof Map) iterator.call(context, object.get(_key27), _key27);else if (Array.isArray(object) || object instanceof Object) iterator.call(context, object[_key27], _key27);\n                }\n            } catch (err) {\n                _didIteratorError21 = true;\n                _iteratorError21 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion21 && _iterator21.return) {\n                        _iterator21.return();\n                    }\n                } finally {\n                    if (_didIteratorError21) {\n                        throw _iteratorError21;\n                    }\n                }\n            }\n\n            return keys;\n        }\n        /**\n         * Sort given objects keys.\n         * @param object - Object which keys should be sorted.\n         * @returns Sorted list of given keys.\n         */\n\n    }, {\n        key: 'sort',\n        value: function sort(object) {\n            var keys = [];\n            if (Array.isArray(object)) for (var index = 0; index < object.length; index++) {\n                keys.push(index);\n            } else if (object instanceof Map) {\n                var _iteratorNormalCompletion22 = true;\n                var _didIteratorError22 = false;\n                var _iteratorError22 = undefined;\n\n                try {\n                    for (var _iterator22 = object[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n                        var _keyValuePair = _step22.value;\n\n                        keys.push(_keyValuePair[0]);\n                    }\n                } catch (err) {\n                    _didIteratorError22 = true;\n                    _iteratorError22 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion22 && _iterator22.return) {\n                            _iterator22.return();\n                        }\n                    } finally {\n                        if (_didIteratorError22) {\n                            throw _iteratorError22;\n                        }\n                    }\n                }\n            } else if (object instanceof Object) for (var _key28 in object) {\n                if (object.hasOwnProperty(_key28)) keys.push(_key28);\n            }return keys.sort();\n        }\n        /**\n         * Returns true if given items are equal for given property list. If\n         * property list isn't set all properties will be checked. All keys which\n         * starts with one of the exception prefixes will be omitted.\n         * @param firstValue - First object to compare.\n         * @param secondValue - Second object to compare.\n         * @param properties - Property names to check. Check all if \"null\" is\n         * selected (default).\n         * @param deep - Recursion depth negative values means infinitely deep\n         * (default).\n         * @param exceptionPrefixes - Property prefixes which indicates properties\n         * to ignore.\n         * @param ignoreFunctions - Indicates whether functions have to be\n         * identical to interpret is as equal. If set to \"true\" two functions will\n         * be assumed to be equal (default).\n         * @returns Value \"true\" if both objects are equal and \"false\" otherwise.\n         */\n\n    }, {\n        key: 'equals',\n        value: function equals(firstValue, secondValue) {\n            var properties = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n            var deep = arguments.length <= 3 || arguments[3] === undefined ? -1 : arguments[3];\n            var exceptionPrefixes = arguments.length <= 4 || arguments[4] === undefined ? ['$', '_'] : arguments[4];\n            var ignoreFunctions = arguments.length <= 5 || arguments[5] === undefined ? true : arguments[5];\n\n            if (ignoreFunctions && Tools.isFunction(firstValue) && Tools.isFunction(secondValue) || firstValue === secondValue || Tools.numberIsNotANumber(firstValue) && Tools.numberIsNotANumber(secondValue) || firstValue instanceof RegExp && secondValue instanceof RegExp && firstValue.toString() === secondValue.toString() || firstValue instanceof Date && secondValue instanceof Date && (isNaN(firstValue.getTime()) && isNaN(secondValue.getTime()) || !isNaN(firstValue.getTime()) && !isNaN(secondValue.getTime()) && firstValue.getTime() === secondValue.getTime())) return true;\n            if (Tools.isPlainObject(firstValue) && Tools.isPlainObject(secondValue) && !(firstValue instanceof RegExp || secondValue instanceof RegExp) || Array.isArray(firstValue) && Array.isArray(secondValue) && firstValue.length === secondValue.length) {\n                var _arr6 = [[firstValue, secondValue], [secondValue, firstValue]];\n\n                for (var _i6 = 0; _i6 < _arr6.length; _i6++) {\n                    var _arr6$_i = _slicedToArray(_arr6[_i6], 2);\n\n                    var first = _arr6$_i[0];\n                    var second = _arr6$_i[1];\n\n                    var firstIsArray = Array.isArray(first);\n                    if (firstIsArray && !Array.isArray(second) || first.length !== second.length) return false;\n                    var equal = true;\n                    if (firstIsArray) {\n                        var index = 0;\n                        var _iteratorNormalCompletion23 = true;\n                        var _didIteratorError23 = false;\n                        var _iteratorError23 = undefined;\n\n                        try {\n                            for (var _iterator23 = first[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                                var _value13 = _step23.value;\n\n                                if (deep !== 0 && !Tools.equals(_value13, second[index], properties, deep - 1, exceptionPrefixes)) equal = false;\n                                index += 1;\n                            }\n                        } catch (err) {\n                            _didIteratorError23 = true;\n                            _iteratorError23 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                                    _iterator23.return();\n                                }\n                            } finally {\n                                if (_didIteratorError23) {\n                                    throw _iteratorError23;\n                                }\n                            }\n                        }\n                    } else for (var _key29 in first) {\n                        if (first.hasOwnProperty(_key29)) {\n                            if (!equal || properties && !properties.includes(_key29)) break;\n                            var doBreak = false;\n                            var _iteratorNormalCompletion24 = true;\n                            var _didIteratorError24 = false;\n                            var _iteratorError24 = undefined;\n\n                            try {\n                                for (var _iterator24 = exceptionPrefixes[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n                                    var exceptionPrefix = _step24.value;\n\n                                    if (_key29.toString().startsWith(exceptionPrefix)) {\n                                        doBreak = true;\n                                        break;\n                                    }\n                                }\n                            } catch (err) {\n                                _didIteratorError24 = true;\n                                _iteratorError24 = err;\n                            } finally {\n                                try {\n                                    if (!_iteratorNormalCompletion24 && _iterator24.return) {\n                                        _iterator24.return();\n                                    }\n                                } finally {\n                                    if (_didIteratorError24) {\n                                        throw _iteratorError24;\n                                    }\n                                }\n                            }\n\n                            if (doBreak) break;\n                            if (deep !== 0 && !Tools.equals(first[_key29], second[_key29], properties, deep - 1, exceptionPrefixes)) equal = false;\n                        }\n                    }if (!equal) return false;\n                }\n                return true;\n            }\n            return false;\n        }\n        /**\n         * Copies given object (of any type) into optionally given destination.\n         * @param source - Object to copy.\n         * @param recursionLimit - Specifies how deep we should traverse into given\n         * object recursively.\n         * @param destination - Target to copy source to.\n         * @param stackSource - Internally used to avoid traversing loops.\n         * @param stackDestination - Internally used to avoid traversing loops and\n         * referencing them correctly.\n         * @param recursionLevel - Internally used to track current recursion\n         * level in given source data structure.\n         * @returns Value \"true\" if both objects are equal and \"false\" otherwise.\n         */\n\n    }, {\n        key: 'copyLimitedRecursively',\n        value: function copyLimitedRecursively(source) {\n            var recursionLimit = arguments.length <= 1 || arguments[1] === undefined ? -1 : arguments[1];\n            var destination = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n            var stackSource = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];\n            var stackDestination = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];\n            var recursionLevel = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];\n\n            if (destination) {\n                if (source === destination) throw Error(\"Can't copy because source and destination are identical.\");\n                if (recursionLimit !== -1 && recursionLimit < recursionLevel) return null;\n                if (![undefined, null].includes(source) && (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object') {\n                    var index = stackSource.indexOf(source);\n                    if (index !== -1) return stackDestination[index];\n                    stackSource.push(source);\n                    stackDestination.push(destination);\n                }\n                var copyValue = function copyValue(value) {\n                    var result = Tools.copyLimitedRecursively(value, recursionLimit, null, stackSource, stackDestination, recursionLevel + 1);\n                    if (![undefined, null].includes(value) && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n                        stackSource.push(value);\n                        stackDestination.push(result);\n                    }\n                    return result;\n                };\n                if (Array.isArray(source)) {\n                    var _iteratorNormalCompletion25 = true;\n                    var _didIteratorError25 = false;\n                    var _iteratorError25 = undefined;\n\n                    try {\n                        for (var _iterator25 = source[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n                            var _item = _step25.value;\n\n                            destination.push(copyValue(_item));\n                        }\n                    } catch (err) {\n                        _didIteratorError25 = true;\n                        _iteratorError25 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion25 && _iterator25.return) {\n                                _iterator25.return();\n                            }\n                        } finally {\n                            if (_didIteratorError25) {\n                                throw _iteratorError25;\n                            }\n                        }\n                    }\n                }if (source instanceof Map) {\n                    var _iteratorNormalCompletion26 = true;\n                    var _didIteratorError26 = false;\n                    var _iteratorError26 = undefined;\n\n                    try {\n                        for (var _iterator26 = source[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n                            var _step26$value = _slicedToArray(_step26.value, 2);\n\n                            var _key30 = _step26$value[0];\n                            var _value14 = _step26$value[1];\n\n                            destination.set(_key30, copyValue(_value14));\n                        }\n                    } catch (err) {\n                        _didIteratorError26 = true;\n                        _iteratorError26 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion26 && _iterator26.return) {\n                                _iterator26.return();\n                            }\n                        } finally {\n                            if (_didIteratorError26) {\n                                throw _iteratorError26;\n                            }\n                        }\n                    }\n                } else for (var _key31 in source) {\n                    if (source.hasOwnProperty(_key31)) destination[_key31] = copyValue(source[_key31]);\n                }\n            } else if (source) {\n                if (Array.isArray(source)) return Tools.copyLimitedRecursively(source, recursionLimit, [], stackSource, stackDestination, recursionLevel);\n                if (source instanceof Map) return Tools.copyLimitedRecursively(source, recursionLimit, new Map(), stackSource, stackDestination, recursionLevel);\n                if (Tools.determineType(source) === 'date') return new Date(source.getTime());\n                if (Tools.determineType(source) === 'regexp') {\n                    destination = new RegExp(source.source, source.toString().match(/[^\\/]*$/)[0]);\n                    destination.lastIndex = source.lastIndex;\n                    return destination;\n                }\n                if (![undefined, null].includes(source) && (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object') return Tools.copyLimitedRecursively(source, recursionLimit, {}, stackSource, stackDestination, recursionLevel);\n            }\n            return destination || source;\n        }\n        // / endregion\n        // / region array\n        /**\n         * Merge the contents of two arrays together into the first array.\n         * @param target - Target array.\n         * @param source - Source array.\n         * @returns Target array with merged given source one.\n         */\n\n    }, {\n        key: 'arrayMerge',\n        value: function arrayMerge(target, source) {\n            var length = Number(source.length);\n            var sourceIndex = 0;\n            var targetIndex = target.length;\n            for (; sourceIndex < length; sourceIndex++) {\n                target[targetIndex++] = source[sourceIndex];\n            }target.length = targetIndex;\n            return target;\n        }\n        /**\n         * Converts given object into an array.\n         * @param object - Target to convert.\n         * @returns Generated array.\n         */\n\n    }, {\n        key: 'arrayMake',\n        value: function arrayMake(object) {\n            var result = [];\n            if (![null, undefined].includes(result)) if (Tools.isArrayLike(Object(object))) Tools.arrayMerge(result, typeof object === 'string' ? [object] : object);else result.push(object);\n            return result;\n        }\n        /**\n         * Makes all values in given iterable unique by removing duplicates (The\n         * first occurrences will be left).\n         * @param data - Array like object.\n         * @returns Sliced version of given object.\n         */\n\n    }, {\n        key: 'arrayUnique',\n        value: function arrayUnique(data) {\n            var result = [];\n            var _iteratorNormalCompletion27 = true;\n            var _didIteratorError27 = false;\n            var _iteratorError27 = undefined;\n\n            try {\n                for (var _iterator27 = data[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n                    var _value15 = _step27.value;\n\n                    if (!result.includes(_value15)) result.push(_value15);\n                }\n            } catch (err) {\n                _didIteratorError27 = true;\n                _iteratorError27 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion27 && _iterator27.return) {\n                        _iterator27.return();\n                    }\n                } finally {\n                    if (_didIteratorError27) {\n                        throw _iteratorError27;\n                    }\n                }\n            }\n\n            return result;\n        }\n        /**\n         * Summarizes given property of given item list.\n         * @param data - Array of objects with given property name.\n         * @param propertyName - Property name to summarize.\n         * @param defaultValue - Value to return if property values doesn't match.\n         * @returns Summarized array.\n         */\n\n    }, {\n        key: 'arrayAggregatePropertyIfEqual',\n        value: function arrayAggregatePropertyIfEqual(data, propertyName) {\n            var defaultValue = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n            var result = defaultValue;\n            if (data && data.length && data[0].hasOwnProperty(propertyName)) {\n                result = data[0][propertyName];\n                var _iteratorNormalCompletion28 = true;\n                var _didIteratorError28 = false;\n                var _iteratorError28 = undefined;\n\n                try {\n                    for (var _iterator28 = data[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n                        var item = _step28.value;\n\n                        if (item[propertyName] !== result) return defaultValue;\n                    }\n                } catch (err) {\n                    _didIteratorError28 = true;\n                    _iteratorError28 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion28 && _iterator28.return) {\n                            _iterator28.return();\n                        }\n                    } finally {\n                        if (_didIteratorError28) {\n                            throw _iteratorError28;\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * Deletes every item witch has only empty attributes for given property\n         * names. If given property names are empty each attribute will be\n         * considered. The empty string, \"null\" and \"undefined\" will be interpreted\n         * as empty.\n         * @param data - Data to filter.\n         * @param propertyNames - Properties to consider.\n         * @returns Given data without empty items.\n         */\n\n    }, {\n        key: 'arrayDeleteEmptyItems',\n        value: function arrayDeleteEmptyItems(data) {\n            var propertyNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n            if (!data) return data;\n            var result = [];\n            var _iteratorNormalCompletion29 = true;\n            var _didIteratorError29 = false;\n            var _iteratorError29 = undefined;\n\n            try {\n                for (var _iterator29 = data[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n                    var item = _step29.value;\n\n                    var empty = true;\n                    for (var propertyName in item) {\n                        if (item.hasOwnProperty(propertyName)) if (!['', null, undefined].includes(item[propertyName]) && (!propertyNames.length || propertyNames.includes(propertyName))) {\n                            empty = false;\n                            break;\n                        }\n                    }if (!empty) result.push(item);\n                }\n            } catch (err) {\n                _didIteratorError29 = true;\n                _iteratorError29 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion29 && _iterator29.return) {\n                        _iterator29.return();\n                    }\n                } finally {\n                    if (_didIteratorError29) {\n                        throw _iteratorError29;\n                    }\n                }\n            }\n\n            return result;\n        }\n        /**\n         * Extracts all properties from all items wich occur in given property\n         * names.\n         * @param data - Data where each item should be sliced.\n         * @param propertyNames - Property names to extract.\n         * @returns Data with sliced items.\n         */\n\n    }, {\n        key: 'arrayExtract',\n        value: function arrayExtract(data, propertyNames) {\n            var result = [];\n            var _iteratorNormalCompletion30 = true;\n            var _didIteratorError30 = false;\n            var _iteratorError30 = undefined;\n\n            try {\n                for (var _iterator30 = data[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n                    var item = _step30.value;\n\n                    var newItem = {};\n                    var _iteratorNormalCompletion31 = true;\n                    var _didIteratorError31 = false;\n                    var _iteratorError31 = undefined;\n\n                    try {\n                        for (var _iterator31 = propertyNames[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n                            var propertyName = _step31.value;\n\n                            if (item.hasOwnProperty(propertyName)) newItem[propertyName] = item[propertyName];\n                        }\n                    } catch (err) {\n                        _didIteratorError31 = true;\n                        _iteratorError31 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                                _iterator31.return();\n                            }\n                        } finally {\n                            if (_didIteratorError31) {\n                                throw _iteratorError31;\n                            }\n                        }\n                    }\n\n                    result.push(newItem);\n                }\n            } catch (err) {\n                _didIteratorError30 = true;\n                _iteratorError30 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion30 && _iterator30.return) {\n                        _iterator30.return();\n                    }\n                } finally {\n                    if (_didIteratorError30) {\n                        throw _iteratorError30;\n                    }\n                }\n            }\n\n            return result;\n        }\n        /**\n         * Extracts all values which matches given regular expression.\n         * @param data - Data to filter.\n         * @param regularExpression - Pattern to match for.\n         * @returns Filtered data.\n         */\n\n    }, {\n        key: 'arrayExtractIfMatches',\n        value: function arrayExtractIfMatches(data, regularExpression) {\n            var result = [];\n            var _iteratorNormalCompletion32 = true;\n            var _didIteratorError32 = false;\n            var _iteratorError32 = undefined;\n\n            try {\n                for (var _iterator32 = data[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                    var _value16 = _step32.value;\n\n                    if ((typeof regularExpression === 'string' ? new RegExp(regularExpression) : regularExpression).test(_value16)) result.push(_value16);\n                }\n            } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                        _iterator32.return();\n                    }\n                } finally {\n                    if (_didIteratorError32) {\n                        throw _iteratorError32;\n                    }\n                }\n            }\n\n            return result;\n        }\n        /**\n         * Filters given data if given property is set or not.\n         * @param data - Data to filter.\n         * @param propertyName - Property name to check for existence.\n         * @returns Given data without the items which doesn't have specified\n         * property.\n         */\n\n    }, {\n        key: 'arrayExtractIfPropertyExists',\n        value: function arrayExtractIfPropertyExists(data, propertyName) {\n            if (data && propertyName) {\n                var result = [];\n                var _iteratorNormalCompletion33 = true;\n                var _didIteratorError33 = false;\n                var _iteratorError33 = undefined;\n\n                try {\n                    for (var _iterator33 = data[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n                        var item = _step33.value;\n\n                        var exists = false;\n                        for (var _key32 in item) {\n                            if (_key32 === propertyName && item.hasOwnProperty(_key32) && ![undefined, null].includes(item[_key32])) {\n                                exists = true;\n                                break;\n                            }\n                        }if (exists) result.push(item);\n                    }\n                } catch (err) {\n                    _didIteratorError33 = true;\n                    _iteratorError33 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                            _iterator33.return();\n                        }\n                    } finally {\n                        if (_didIteratorError33) {\n                            throw _iteratorError33;\n                        }\n                    }\n                }\n\n                return result;\n            }\n            return data;\n        }\n        /**\n         * Extract given data where specified property value matches given\n         * patterns.\n         * @param data - Data to filter.\n         * @param propertyPattern - Mapping of property names to pattern.\n         * @returns Filtered data.\n         */\n\n    }, {\n        key: 'arrayExtractIfPropertyMatches',\n        value: function arrayExtractIfPropertyMatches(data, propertyPattern) {\n            if (data && propertyPattern) {\n                var result = [];\n                var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                    for (var _iterator34 = data[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                        var item = _step34.value;\n\n                        var matches = true;\n                        for (var propertyName in propertyPattern) {\n                            if (!(propertyPattern[propertyName] instanceof RegExp ? propertyPattern[propertyName] : new RegExp(propertyPattern[propertyName])).test(item[propertyName])) {\n                                matches = false;\n                                break;\n                            }\n                        }if (matches) result.push(item);\n                    }\n                } catch (err) {\n                    _didIteratorError34 = true;\n                    _iteratorError34 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                            _iterator34.return();\n                        }\n                    } finally {\n                        if (_didIteratorError34) {\n                            throw _iteratorError34;\n                        }\n                    }\n                }\n\n                return result;\n            }\n            return data;\n        }\n        /**\n         * Determines all objects which exists in \"firstSet\" and in \"secondSet\".\n         * Object key which will be compared are given by \"keys\". If an empty array\n         * is given each key will be compared. If an object is given corresponding\n         * initial data key will be mapped to referenced new data key.\n         * @param firstSet - Referenced data to check for.\n         * @param secondSet - Data to check for existence.\n         * @param keys - Keys to define equality.\n         * @param strict - The strict parameter indicates whether \"null\" and\n         * \"undefined\" should be interpreted as equal (takes only effect if given\n         * keys aren't empty).\n         * @returns Data which does exit in given initial data.\n         */\n\n    }, {\n        key: 'arrayIntersect',\n        value: function arrayIntersect(firstSet, secondSet) {\n            var keys = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n            var strict = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n            var containingData = [];\n            var _iteratorNormalCompletion35 = true;\n            var _didIteratorError35 = false;\n            var _iteratorError35 = undefined;\n\n            try {\n                var _loop = function _loop() {\n                    var initialItem = _step35.value;\n\n                    if (Tools.isPlainObject(initialItem)) {\n                        var _iteratorNormalCompletion36 = true;\n                        var _didIteratorError36 = false;\n                        var _iteratorError36 = undefined;\n\n                        try {\n                            var _loop2 = function _loop2() {\n                                var newItem = _step36.value;\n\n                                var exists = true;\n                                var iterateGivenKeys = void 0;\n                                var keysAreAnArray = Array.isArray(keys);\n                                if (Tools.isPlainObject(keys) || keysAreAnArray && keys.length) iterateGivenKeys = true;else {\n                                    iterateGivenKeys = false;\n                                    keys = initialItem;\n                                }\n                                var handle = function handle(firstSetKey, secondSetKey) {\n                                    if (keysAreAnArray && iterateGivenKeys) firstSetKey = secondSetKey;else if (!iterateGivenKeys) secondSetKey = firstSetKey;\n                                    if (newItem[secondSetKey] !== initialItem[firstSetKey] && (strict || !([null, undefined].includes(newItem[secondSetKey]) && [null, undefined].includes(initialItem[firstSetKey])))) {\n                                        exists = false;\n                                        return false;\n                                    }\n                                };\n                                if (Array.isArray(keys)) {\n                                    var index = 0;\n                                    var _iteratorNormalCompletion37 = true;\n                                    var _didIteratorError37 = false;\n                                    var _iteratorError37 = undefined;\n\n                                    try {\n                                        for (var _iterator37 = keys[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n                                            var _key33 = _step37.value;\n\n                                            if (handle(index, _key33) === false) break;\n                                            index += 1;\n                                        }\n                                    } catch (err) {\n                                        _didIteratorError37 = true;\n                                        _iteratorError37 = err;\n                                    } finally {\n                                        try {\n                                            if (!_iteratorNormalCompletion37 && _iterator37.return) {\n                                                _iterator37.return();\n                                            }\n                                        } finally {\n                                            if (_didIteratorError37) {\n                                                throw _iteratorError37;\n                                            }\n                                        }\n                                    }\n                                } else for (var _key34 in keys) {\n                                    if (keys.hasOwnProperty(_key34)) if (handle(_key34, keys[_key34]) === false) break;\n                                }if (exists) {\n                                    containingData.push(initialItem);\n                                    return 'break';\n                                }\n                            };\n\n                            for (var _iterator36 = secondSet[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n                                var _ret3 = _loop2();\n\n                                if (_ret3 === 'break') break;\n                            }\n                        } catch (err) {\n                            _didIteratorError36 = true;\n                            _iteratorError36 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion36 && _iterator36.return) {\n                                    _iterator36.return();\n                                }\n                            } finally {\n                                if (_didIteratorError36) {\n                                    throw _iteratorError36;\n                                }\n                            }\n                        }\n                    } else if (secondSet.includes(initialItem)) containingData.push(initialItem);\n                };\n\n                for (var _iterator35 = firstSet[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                    _loop();\n                }\n            } catch (err) {\n                _didIteratorError35 = true;\n                _iteratorError35 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                        _iterator35.return();\n                    }\n                } finally {\n                    if (_didIteratorError35) {\n                        throw _iteratorError35;\n                    }\n                }\n            }\n\n            return containingData;\n        }\n        /**\n         * Creates a list of items within given range.\n         * @param range - Array of lower and upper bounds. If only one value is\n         * given lower bound will be assumed to be zero. Both integers have to be\n         * positive and will be contained in the resulting array.\n         * @param step - Space between two consecutive values.\n         * @returns Produced array of integers.\n         */\n\n    }, {\n        key: 'arrayMakeRange',\n        value: function arrayMakeRange(range) {\n            var step = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n            var index = void 0;\n            var higherBound = void 0;\n            if (range.length === 1) {\n                index = 0;\n                higherBound = parseInt(range[0], 10);\n            } else if (range.length === 2) {\n                index = parseInt(range[0], 10);\n                higherBound = parseInt(range[1], 10);\n            } else return range;\n            var result = [index];\n            while (index <= higherBound - step) {\n                index += step;\n                result.push(index);\n            }\n            return result;\n        }\n        /**\n         * Sums up given property of given item list.\n         * @param data - The objects with specified property to sum up.\n         * @param propertyName - Property name to sum up its value.\n         * @returns The aggregated value.\n         */\n\n    }, {\n        key: 'arraySumUpProperty',\n        value: function arraySumUpProperty(data, propertyName) {\n            var result = 0;\n            if (Array.isArray(data) && data.length) {\n                var _iteratorNormalCompletion38 = true;\n                var _didIteratorError38 = false;\n                var _iteratorError38 = undefined;\n\n                try {\n                    for (var _iterator38 = data[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n                        var _item2 = _step38.value;\n\n                        if (_item2.hasOwnProperty(propertyName)) result += parseFloat(_item2[propertyName] || 0);\n                    }\n                } catch (err) {\n                    _didIteratorError38 = true;\n                    _iteratorError38 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion38 && _iterator38.return) {\n                            _iterator38.return();\n                        }\n                    } finally {\n                        if (_didIteratorError38) {\n                            throw _iteratorError38;\n                        }\n                    }\n                }\n            }return result;\n        }\n        /**\n         * Adds an item to another item as array connection (many to one).\n         * @param item - Item where the item should be appended to.\n         * @param target - Target to add to given item.\n         * @param name - Name of the target connection.\n         * @param checkIfExists - Indicates if duplicates are allowed in resulting\n         * list (will result in linear runtime instead of constant one).\n         * @returns Item with the appended target.\n         */\n\n    }, {\n        key: 'arrayAppendAdd',\n        value: function arrayAppendAdd(item, target, name) {\n            var checkIfExists = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];\n\n            if (item.hasOwnProperty(name)) {\n                if (!(checkIfExists && item[name].includes(target))) item[name].push(target);\n            } else item[name] = [target];\n            return item;\n        }\n        /**\n         * Removes given target on given list.\n         * @param list - Array to splice.\n         * @param target - Target to remove from given list.\n         * @param strict - Indicates whether to fire an exception if given target\n         * doesn't exists given list.\n         * @returns Item with the appended target.\n         */\n\n    }, {\n        key: 'arrayRemove',\n        value: function arrayRemove(list, target) {\n            var strict = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n            if (Array.isArray(list)) {\n                var index = list.indexOf(target);\n                if (index === -1) {\n                    if (strict) throw Error(\"Given target doesn't exists in given list.\");\n                } else\n                    /* eslint-disable max-statements-per-line */\n                    list.splice(index, 1);\n                /* eslint-enable max-statements-per-line */\n            } else if (strict) throw Error(\"Given target isn't an array.\");\n            return list;\n        }\n        // / endregion\n        // / region string\n        // // region url handling\n        /**\n         * Translates given string into the regular expression validated\n         * representation.\n         * @param value - String to convert.\n         * @param excludeSymbols - Symbols not to escape.\n         * @returns Converted string.\n         */\n\n    }, {\n        key: 'stringConvertToValidRegularExpression',\n        value: function stringConvertToValidRegularExpression(value) {\n            var excludeSymbols = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n            // NOTE: This is only for performance improvements.\n            if (value.length === 1 && !Tools.specialRegexSequences.includes(value)) return value;\n            // The escape sequence must also be escaped; but at first.\n            if (!excludeSymbols.includes('\\\\')) value.replace(/\\\\/g, '\\\\\\\\');\n            var _iteratorNormalCompletion39 = true;\n            var _didIteratorError39 = false;\n            var _iteratorError39 = undefined;\n\n            try {\n                for (var _iterator39 = Tools.specialRegexSequences[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n                    var replace = _step39.value;\n\n                    if (!excludeSymbols.includes(replace)) value = value.replace(new RegExp('\\\\' + replace, 'g'), '\\\\' + replace);\n                }\n            } catch (err) {\n                _didIteratorError39 = true;\n                _iteratorError39 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion39 && _iterator39.return) {\n                        _iterator39.return();\n                    }\n                } finally {\n                    if (_didIteratorError39) {\n                        throw _iteratorError39;\n                    }\n                }\n            }\n\n            return value;\n        }\n        /**\n         * Translates given name into a valid javaScript one.\n         * @param name - Name to convert.\n         * @param allowedSymbols - String of symbols which should be allowed within\n         * a variable name (not the first character).\n         * @returns Converted name is returned.\n         */\n\n    }, {\n        key: 'stringConvertToValidVariableName',\n        value: function stringConvertToValidVariableName(name) {\n            var allowedSymbols = arguments.length <= 1 || arguments[1] === undefined ? '0-9a-zA-Z_$' : arguments[1];\n\n            return name.toString().replace(/^[^a-zA-Z_$]+/, '').replace(new RegExp('[^' + allowedSymbols + ']+([a-zA-Z0-9])', 'g'), function (fullMatch, firstLetter) {\n                return firstLetter.toUpperCase();\n            });\n        }\n        /**\n         * This method is intended for encoding *key* or *value* parts of query\n         * component. We need a custom method because \"encodeURIComponent()\" is too\n         * aggressive and encodes stuff that doesn't have to be encoded per\n         * \"http://tools.ietf.org/html/rfc3986:\".\n         * @param url - URL to encode.\n         * @param encodeSpaces - Indicates whether given url should encode\n         * whitespaces as \"+\" or \"%20\".\n         * @returns Encoded given url.\n         */\n\n    }, {\n        key: 'stringEncodeURIComponent',\n        value: function stringEncodeURIComponent(url, encodeSpaces) {\n            return encodeURIComponent(url).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, encodeSpaces ? '%20' : '+');\n        }\n        /**\n         * Appends a path selector to the given path if there isn't one yet.\n         * @param path - The path for appending a selector.\n         * @param pathSeparator - The selector for appending to path.\n         * @returns The appended path.\n         */\n\n    }, {\n        key: 'stringAddSeparatorToPath',\n        value: function stringAddSeparatorToPath(path) {\n            var pathSeparator = arguments.length <= 1 || arguments[1] === undefined ? '/' : arguments[1];\n\n            path = path.trim();\n            if (path.substr(-1) !== pathSeparator && path.length) return path + pathSeparator;\n            return path;\n        }\n        /**\n         * Checks if given path has given path prefix.\n         * @param prefix - Path prefix to search for.\n         * @param path - Path to search in.\n         * @param separator - Delimiter to use in path (default is the posix\n         * conform slash).\n         * @returns Value \"true\" if given prefix occur and \"false\" otherwise.\n         */\n\n    }, {\n        key: 'stringHasPathPrefix',\n        value: function stringHasPathPrefix() {\n            var prefix = arguments.length <= 0 || arguments[0] === undefined ? '/admin' : arguments[0];\n            var path = arguments.length <= 1 || arguments[1] === undefined ? 'location' in $.global && $.global.location.pathname || '' : arguments[1];\n            var separator = arguments.length <= 2 || arguments[2] === undefined ? '/' : arguments[2];\n\n            if (typeof prefix === 'string') {\n                if (!prefix.endsWith(separator)) prefix += separator;\n                return path === prefix.substring(0, prefix.length - separator.length) || path.startsWith(prefix);\n            }\n            return false;\n        }\n        /**\n         * Extracts domain name from given url. If no explicit domain name given\n         * current domain name will be assumed. If no parameter given current\n         * domain name will be determined.\n         * @param url - The url to extract domain from.\n         * @param fallback - The fallback host name if no one exits in given url\n         * (default is current hostname).\n         * @returns Extracted domain.\n         */\n\n    }, {\n        key: 'stringGetDomainName',\n        value: function stringGetDomainName() {\n            var url = arguments.length <= 0 || arguments[0] === undefined ? 'location' in $.global && $.global.location.href || '' : arguments[0];\n            var fallback = arguments.length <= 1 || arguments[1] === undefined ? 'location' in $.global && $.global.location.hostname || '' : arguments[1];\n\n            var result = /^([a-z]*:?\\/\\/)?([^/]+?)(?::[0-9]+)?(?:\\/.*|$)/i.exec(url);\n            if (result && result.length > 2 && result[1] && result[2]) return result[2];\n            return fallback;\n        }\n        /**\n         * Extracts port number from given url. If no explicit port number given\n         * and no fallback is defined current port number will be assumed for local\n         * links. For external links 80 will be assumed for http protocol or 443\n         * for https.\n         * @param url - The url to extract port from.\n         * @param fallback - Fallback port number if no explicit one was found.\n         * Default is derived from current protocol name.\n         * @param parameter - Additional parameter for checking if given url is an\n         * internal url. Given url and this parameter will be forwarded to the\n         * \"stringIsInternalURL()\" method.\n         * @returns Extracted port number.\n         */\n\n    }, {\n        key: 'stringGetPortNumber',\n        value: function stringGetPortNumber() {\n            var url = arguments.length <= 0 || arguments[0] === undefined ? 'location' in $.global && $.global.location.href || '' : arguments[0];\n            var fallback = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n            var parameter = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\n            var result = /^(?:[a-z]*:?\\/\\/[^/]+?)?(?:[^/]+?):([0-9]+)/i.exec(url);\n            if (result && result.length > 1) return parseInt(result[1], 10);\n            if (fallback !== null) return fallback;\n            if (Tools.stringIsInternalURL.apply(this, [url].concat(parameter)) && 'location' in $.global && $.global.location.port && parseInt($.global.location.port, 10)) return parseInt($.global.location.port, 10);\n            return Tools.stringGetProtocolName(url) === 'https' ? 443 : 80;\n        }\n        /**\n         * Extracts protocol name from given url. If no explicit url is given,\n         * current protocol will be assumed. If no parameter given current protocol\n         * number will be determined.\n         * @param url - The url to extract protocol from.\n         * @param fallback - Fallback port to use if no protocol exists in given\n         * url (default is current protocol).\n         * returns Extracted protocol.\n         */\n\n    }, {\n        key: 'stringGetProtocolName',\n        value: function stringGetProtocolName() {\n            var url = arguments.length <= 0 || arguments[0] === undefined ? 'location' in $.global && $.global.location.href || '' : arguments[0];\n            var fallback = arguments.length <= 1 || arguments[1] === undefined ? 'location' in $.global && $.global.location.protocol.substring(0, $.global.location.protocol.length - 1) || '' : arguments[1];\n\n            var result = /^([a-z]+):\\/\\//i.exec(url);\n            if (result && result.length > 1 && result[1]) return result[1];\n            return fallback;\n        }\n        /**\n         * Read a page's GET URL variables and return them as an associative array\n         * and preserves ordering.\n         * @param keyToGet - If key given the corresponding value is returned and\n         * full object otherwise.\n         * @param givenInput - An alternative input to the url search parameter. If\n         * \"#\" is given the complete current hash tag will be interpreted as url\n         * and search parameter will be extracted from there. If \"&\" is given\n         * classical search parameter and hash parameter will be taken in account.\n         * If a search string is given this will be analyzed. The default is to\n         * take given search part into account.\n         * @param subDelimiter - Defines which sequence indicates the start of\n         * parameter in a hash part of the url.\n         * @param hashedPathIndicator - If defined and given hash starts with this\n         * indicator given hash will be interpreted as path containing search and\n         * hash parts.\n         * @param givenSearch - Search part to take into account defaults to\n         * current url search part.\n         * @param givenHash - Hash part to take into account defaults to current\n         * url hash part.\n         * @returns Returns the current get array or requested value. If requested\n         * key doesn't exist \"undefined\" is returned.\n         */\n\n    }, {\n        key: 'stringGetURLVariable',\n        value: function stringGetURLVariable(keyToGet, givenInput) {\n            var subDelimiter = arguments.length <= 2 || arguments[2] === undefined ? '$' : arguments[2];\n            var hashedPathIndicator = arguments.length <= 3 || arguments[3] === undefined ? '!' : arguments[3];\n            var givenSearch = arguments[4];\n            var givenHash = arguments.length <= 5 || arguments[5] === undefined ? 'location' in $.global && $.global.location.hash || '' : arguments[5];\n\n            // region set search and hash\n            var hash = givenHash ? givenHash : '#';\n            var search = '';\n            if (givenSearch) search = givenSearch;else if (hashedPathIndicator && hash.startsWith(hashedPathIndicator)) {\n                var subHashStartIndex = hash.indexOf('#');\n                var pathAndSearch = void 0;\n                if (subHashStartIndex === -1) {\n                    pathAndSearch = hash.substring(hashedPathIndicator.length);\n                    hash = '';\n                } else {\n                    pathAndSearch = hash.substring(hashedPathIndicator.length, subHashStartIndex);\n                    hash = hash.substring(subHashStartIndex);\n                }\n                var subSearchStartIndex = pathAndSearch.indexOf('?');\n                if (subSearchStartIndex !== -1) search = pathAndSearch.substring(subSearchStartIndex);\n            } else if ('location' in $.global) search = $.global.location.search || '';\n            var input = givenInput ? givenInput : search;\n            // endregion\n            // region determine data from search and hash if specified\n            var both = input === '&';\n            if (both || input === '#') {\n                var decodedHash = '';\n                try {\n                    decodedHash = decodeURIComponent(hash);\n                } catch (error) {}\n                var subDelimiterIndex = decodedHash.indexOf(subDelimiter);\n                if (subDelimiterIndex === -1) input = '';else {\n                    input = decodedHash.substring(subDelimiterIndex);\n                    if (input.startsWith(subDelimiter)) input = input.substring(subDelimiter.length);\n                }\n            } else if (input.startsWith('?')) input = input.substring('?'.length);\n            var data = input ? input.split('&') : [];\n            search = search.substring('?'.length);\n            if (both && search) data = data.concat(search.split('&'));\n            // endregion\n            // region construct data structure\n            var variables = [];\n            var _iteratorNormalCompletion40 = true;\n            var _didIteratorError40 = false;\n            var _iteratorError40 = undefined;\n\n            try {\n                for (var _iterator40 = data[Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n                    var _value17 = _step40.value;\n\n                    var keyValuePair = _value17.split('=');\n                    var _key35 = void 0;\n                    try {\n                        _key35 = decodeURIComponent(keyValuePair[0]);\n                    } catch (error) {\n                        _key35 = '';\n                    }\n                    try {\n                        _value17 = decodeURIComponent(keyValuePair[1]);\n                    } catch (error) {\n                        _value17 = '';\n                    }\n                    variables.push(_key35);\n                    // IgnoreTypeCheck\n                    variables[_key35] = _value17;\n                }\n                // endregion\n            } catch (err) {\n                _didIteratorError40 = true;\n                _iteratorError40 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                        _iterator40.return();\n                    }\n                } finally {\n                    if (_didIteratorError40) {\n                        throw _iteratorError40;\n                    }\n                }\n            }\n\n            if (keyToGet)\n                // IgnoreTypeCheck\n                return variables[keyToGet];\n            return variables;\n        }\n        /**\n         * Checks if given url points to another domain than second given url. If\n         * no second given url provided current url will be assumed.\n         * @param firstURL - URL to check against second url.\n         * @param secondURL - URL to check against first url.\n         * @returns Returns \"true\" if given first url has same domain as given\n         * second (or current).\n         */\n\n    }, {\n        key: 'stringIsInternalURL',\n        value: function stringIsInternalURL(firstURL) {\n            var secondURL = arguments.length <= 1 || arguments[1] === undefined ? 'location' in $.global && $.global.location.href || '' : arguments[1];\n\n            var explicitDomainName = Tools.stringGetDomainName(firstURL, false);\n            var explicitProtocolName = Tools.stringGetProtocolName(firstURL, false);\n            var explicitPortNumber = Tools.stringGetPortNumber(firstURL, false);\n            return (!explicitDomainName || explicitDomainName === Tools.stringGetDomainName(secondURL)) && (!explicitProtocolName || explicitProtocolName === Tools.stringGetProtocolName(secondURL)) && (!explicitPortNumber || explicitPortNumber === Tools.stringGetPortNumber(secondURL));\n        }\n        /**\n         * Normalized given website url.\n         * @param url - Uniform resource locator to normalize.\n         * @returns Normalized result.\n         */\n\n    }, {\n        key: 'stringNormalizeURL',\n        value: function stringNormalizeURL(url) {\n            if (url) {\n                url = url.replace(/^:?\\/+/, '').replace(/\\/+$/, '').trim();\n                if (url.startsWith('http')) return url;\n                return 'http://' + url;\n            }\n            return '';\n        }\n        /**\n         * Represents given website url.\n         * @param url - Uniform resource locator to represent.\n         * @returns Represented result.\n         */\n\n    }, {\n        key: 'stringRepresentURL',\n        value: function stringRepresentURL(url) {\n            if (typeof url === 'string') return url.replace(/^(https?)?:?\\/+/, '').replace(/\\/+$/, '').trim();\n            return '';\n        }\n        // // endregion\n        /**\n         * Compresses given style attribute value.\n         * @param styleValue - Style value to compress.\n         * @returns The compressed value.\n         */\n\n    }, {\n        key: 'stringCompressStyleValue',\n        value: function stringCompressStyleValue(styleValue) {\n            return styleValue.replace(/ *([:;]) */g, '$1').replace(/ +/g, ' ').replace(/^;+/, '').replace(/;+$/, '').trim();\n        }\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * Converts a camel cased string to its delimited string version.\n         * @param string - The string to format.\n         * @param delimiter - Delimiter string\n         * @param abbreviations - Collection of shortcut words to represent upper\n         * cased.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringCamelCaseToDelimited',\n        value: function stringCamelCaseToDelimited(string) {\n            var delimiter = arguments.length <= 1 || arguments[1] === undefined ? '-' : arguments[1];\n            var abbreviations = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            if (!abbreviations) abbreviations = Tools.abbreviations;\n            var escapedDelimiter = Tools.stringGetRegularExpressionValidated(delimiter);\n            if (abbreviations.length) {\n                var abbreviationPattern = '';\n                var _iteratorNormalCompletion41 = true;\n                var _didIteratorError41 = false;\n                var _iteratorError41 = undefined;\n\n                try {\n                    for (var _iterator41 = abbreviations[Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n                        var abbreviation = _step41.value;\n\n                        if (abbreviationPattern) abbreviationPattern += '|';\n                        abbreviationPattern += abbreviation.toUpperCase();\n                    }\n                } catch (err) {\n                    _didIteratorError41 = true;\n                    _iteratorError41 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                            _iterator41.return();\n                        }\n                    } finally {\n                        if (_didIteratorError41) {\n                            throw _iteratorError41;\n                        }\n                    }\n                }\n\n                string = string.replace(new RegExp('(' + abbreviationPattern + ')(' + abbreviationPattern + ')', 'g'), '$1' + delimiter + '$2');\n            }\n            string = string.replace(new RegExp('([^' + escapedDelimiter + '])([A-Z][a-z]+)', 'g'), '$1' + delimiter + '$2');\n            return string.replace(new RegExp('([a-z0-9])([A-Z])', 'g'), '$1' + delimiter + '$2').toLowerCase();\n        }\n        /* eslint-disable jsdoc/require-description-complete-sentence */\n        /**\n         * Converts a string to its capitalize representation.\n         * @param string - The string to format.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringCapitalize',\n        value: function stringCapitalize(string) {\n            /* eslint-enable jsdoc/require-description-complete-sentence */\n            return string.charAt(0).toUpperCase() + string.substring(1);\n        }\n        /**\n         * Converts a delimited string to its camel case representation.\n         * @param string - The string to format.\n         * @param delimiter - Delimiter string to use.\n         * @param abbreviations - Collection of shortcut words to represent upper\n         * cased.\n         * @param preserveWrongFormattedAbbreviations - If set to \"True\" wrong\n         * formatted camel case abbreviations will be ignored.\n         * @param removeMultipleDelimiter - Indicates whether a series of delimiter\n         * should be consolidated.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringDelimitedToCamelCase',\n        value: function stringDelimitedToCamelCase(string) {\n            var delimiter = arguments.length <= 1 || arguments[1] === undefined ? '-' : arguments[1];\n            var abbreviations = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n            var preserveWrongFormattedAbbreviations = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n            var removeMultipleDelimiter = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\n            var escapedDelimiter = Tools.stringGetRegularExpressionValidated(delimiter);\n            if (!abbreviations) abbreviations = Tools.abbreviations;\n            var abbreviationPattern = void 0;\n            if (preserveWrongFormattedAbbreviations) abbreviationPattern = abbreviations.join('|');else {\n                abbreviationPattern = '';\n                var _iteratorNormalCompletion42 = true;\n                var _didIteratorError42 = false;\n                var _iteratorError42 = undefined;\n\n                try {\n                    for (var _iterator42 = abbreviations[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                        var abbreviation = _step42.value;\n\n                        if (abbreviationPattern) abbreviationPattern += '|';\n                        abbreviationPattern += Tools.stringCapitalize(abbreviation) + '|' + abbreviation;\n                    }\n                } catch (err) {\n                    _didIteratorError42 = true;\n                    _iteratorError42 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                            _iterator42.return();\n                        }\n                    } finally {\n                        if (_didIteratorError42) {\n                            throw _iteratorError42;\n                        }\n                    }\n                }\n            }\n            var stringStartsWithDelimiter = false;\n            if (string.startsWith(delimiter)) {\n                string = string.substring(delimiter.length);\n                stringStartsWithDelimiter = true;\n            }\n            string = string.replace(new RegExp('(' + escapedDelimiter + ')(' + abbreviationPattern + ')' + ('(' + escapedDelimiter + '|$)'), 'g'), function (fullMatch, before, abbreviation, after) {\n                return before + abbreviation.toUpperCase() + after;\n            });\n            if (removeMultipleDelimiter) escapedDelimiter = '(?:' + escapedDelimiter + ')+';\n            string = string.replace(new RegExp(escapedDelimiter + '([a-zA-Z0-9])', 'g'), function (fullMatch, firstLetter) {\n                return firstLetter.toUpperCase();\n            });\n            if (stringStartsWithDelimiter) string = delimiter + string;\n            return string;\n        }\n        /**\n         * Performs a string formation. Replaces every placeholder \"{i}\" with the\n         * i'th argument.\n         * @param string - The string to format.\n         * @param additionalArguments - Additional arguments are interpreted as\n         * replacements for string formating.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringFormat',\n        value: function stringFormat(string) {\n            for (var _len11 = arguments.length, additionalArguments = Array(_len11 > 1 ? _len11 - 1 : 0), _key36 = 1; _key36 < _len11; _key36++) {\n                additionalArguments[_key36 - 1] = arguments[_key36];\n            }\n\n            additionalArguments.unshift(string);\n            var index = 0;\n            var _iteratorNormalCompletion43 = true;\n            var _didIteratorError43 = false;\n            var _iteratorError43 = undefined;\n\n            try {\n                for (var _iterator43 = additionalArguments[Symbol.iterator](), _step43; !(_iteratorNormalCompletion43 = (_step43 = _iterator43.next()).done); _iteratorNormalCompletion43 = true) {\n                    var _value18 = _step43.value;\n\n                    string = string.replace(new RegExp('\\\\{' + index + '\\\\}', 'gm'), '' + _value18);\n                    index += 1;\n                }\n            } catch (err) {\n                _didIteratorError43 = true;\n                _iteratorError43 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion43 && _iterator43.return) {\n                        _iterator43.return();\n                    }\n                } finally {\n                    if (_didIteratorError43) {\n                        throw _iteratorError43;\n                    }\n                }\n            }\n\n            return string;\n        }\n        /**\n         * Validates the current string for using in a regular expression pattern.\n         * Special regular expression chars will be escaped.\n         * @param string - The string to format.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringGetRegularExpressionValidated',\n        value: function stringGetRegularExpressionValidated(string) {\n            return string.replace(/([\\\\|.*$^+[\\]()?\\-{}])/g, '\\\\$1');\n        }\n        /**\n         * Converts a string to its lower case representation.\n         * @param string - The string to format.\n         * @returns The formatted string.\n         */\n\n    }, {\n        key: 'stringLowerCase',\n        value: function stringLowerCase(string) {\n            return string.charAt(0).toLowerCase() + string.substring(1);\n        }\n        /**\n         * Wraps given mark strings in given target with given marker.\n         * @param target - String to search for marker.\n         * @param mark - String to search in target for.\n         * @param marker - HTML template string to mark.\n         * @param caseSensitive - Indicates whether case takes a role during\n         * searching.\n         * @returns Processed result.\n         */\n\n    }, {\n        key: 'stringMark',\n        value: function stringMark(target, mark) {\n            var marker = arguments.length <= 2 || arguments[2] === undefined ? '<span class=\"tools-mark\">{1}</span>' : arguments[2];\n            var caseSensitive = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            if (target && mark) {\n                target = target.trim();\n                mark = mark.trim();\n                var offset = 0;\n                var searchTarget = target;\n                if (!caseSensitive) searchTarget = searchTarget.toLowerCase();\n                if (!caseSensitive) mark = mark.toLowerCase();\n                while (true) {\n                    var index = searchTarget.indexOf(mark, offset);\n                    if (index === -1) break;else {\n                        target = target.substring(0, index) + Tools.stringFormat(marker, target.substr(index, mark.length)) + target.substring(index + mark.length);\n                        if (!caseSensitive) searchTarget = target.toLowerCase();\n                        offset = index + (marker.length - '{1}'.length) + mark.length;\n                    }\n                }\n            }\n            return target;\n        }\n        /**\n         * Implements the md5 hash algorithm.\n         * @param value - Value to calculate md5 hash for.\n         * @param onlyAscii - Set to true if given input has ascii characters only\n         * to get more performance.\n         * @returns Calculated md5 hash value.\n         */\n\n    }, {\n        key: 'stringMD5',\n        value: function stringMD5(value) {\n            var onlyAscii = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n            var hexCharacters = '0123456789abcdef'.split('');\n            // region sub helper\n            /**\n             * This function is much faster, so if possible we use it. Some IEs\n             * are the only ones I know of that need the idiotic second function,\n             * generated by an if clause in the end.\n             * @param first - First operand to add.\n             * @param second - Second operant to add.\n             * @returns The sum of both given operands.\n            */\n            var unsignedModule2PowerOf32Addition = function unsignedModule2PowerOf32Addition(first, second) {\n                return first + second & 0xFFFFFFFF;\n            };\n            // / region primary functions needed for the algorithm\n            /*\n             * Implements the basic operation for each round of the algorithm.\n             */\n            var cmn = function cmn(q, a, b, x, s, t) {\n                a = unsignedModule2PowerOf32Addition(unsignedModule2PowerOf32Addition(a, q), unsignedModule2PowerOf32Addition(x, t));\n                return unsignedModule2PowerOf32Addition(a << s | a >>> 32 - s, b);\n            };\n            /**\n             * First algorithm part.\n             * @param a - Operand.\n             * @param b - Operand.\n             * @param c - Operand.\n             * @param d - Operand.\n             * @param x - Operand.\n             * @param s - Operand.\n             * @param t - Operand.\n             * @returns Result.\n             */\n            var ff = function ff(a, b, c, d, x, s, t) {\n                return cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n            /**\n             * Second algorithm part.\n             * @param a - Operand.\n             * @param b - Operand.\n             * @param c - Operand.\n             * @param d - Operand.\n             * @param x - Operand.\n             * @param s - Operand.\n             * @param t - Operand.\n             * @returns Result.\n             */\n            var gg = function gg(a, b, c, d, x, s, t) {\n                return cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n            /**\n             * Third algorithm part.\n             * @param a - Operand.\n             * @param b - Operand.\n             * @param c - Operand.\n             * @param d - Operand.\n             * @param x - Operand.\n             * @param s - Operand.\n             * @param t - Operand.\n             * @returns Result.\n             */\n            var hh = function hh(a, b, c, d, x, s, t) {\n                return cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n            /**\n             * Fourth algorithm part.\n             * @param a - Operand.\n             * @param b - Operand.\n             * @param c - Operand.\n             * @param d - Operand.\n             * @param x - Operand.\n             * @param s - Operand.\n             * @param t - Operand.\n             * @returns Result.\n             */\n            var ii = function ii(a, b, c, d, x, s, t) {\n                return cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /**\n             * Performs all 16 needed steps.\n             * @param state - Current state.\n             * @param blocks - Blocks to cycle through.\n             * @returns Returns given state.\n             */\n            var cycle = function cycle(state, blocks) {\n                var a = state[0];\n                var b = state[1];\n                var c = state[2];\n                var d = state[3];\n                // region round 1\n                a = ff(a, b, c, d, blocks[0], 7, -680876936);\n                d = ff(d, a, b, c, blocks[1], 12, -389564586);\n                c = ff(c, d, a, b, blocks[2], 17, 606105819);\n                b = ff(b, c, d, a, blocks[3], 22, -1044525330);\n\n                a = ff(a, b, c, d, blocks[4], 7, -176418897);\n                d = ff(d, a, b, c, blocks[5], 12, 1200080426);\n                c = ff(c, d, a, b, blocks[6], 17, -1473231341);\n                b = ff(b, c, d, a, blocks[7], 22, -45705983);\n\n                a = ff(a, b, c, d, blocks[8], 7, 1770035416);\n                d = ff(d, a, b, c, blocks[9], 12, -1958414417);\n                c = ff(c, d, a, b, blocks[10], 17, -42063);\n                b = ff(b, c, d, a, blocks[11], 22, -1990404162);\n\n                a = ff(a, b, c, d, blocks[12], 7, 1804603682);\n                d = ff(d, a, b, c, blocks[13], 12, -40341101);\n                c = ff(c, d, a, b, blocks[14], 17, -1502002290);\n                b = ff(b, c, d, a, blocks[15], 22, 1236535329);\n                // endregion\n                // region round 2\n                a = gg(a, b, c, d, blocks[1], 5, -165796510);\n                d = gg(d, a, b, c, blocks[6], 9, -1069501632);\n                c = gg(c, d, a, b, blocks[11], 14, 643717713);\n                b = gg(b, c, d, a, blocks[0], 20, -373897302);\n\n                a = gg(a, b, c, d, blocks[5], 5, -701558691);\n                d = gg(d, a, b, c, blocks[10], 9, 38016083);\n                c = gg(c, d, a, b, blocks[15], 14, -660478335);\n                b = gg(b, c, d, a, blocks[4], 20, -405537848);\n\n                a = gg(a, b, c, d, blocks[9], 5, 568446438);\n                d = gg(d, a, b, c, blocks[14], 9, -1019803690);\n                c = gg(c, d, a, b, blocks[3], 14, -187363961);\n                b = gg(b, c, d, a, blocks[8], 20, 1163531501);\n\n                a = gg(a, b, c, d, blocks[13], 5, -1444681467);\n                d = gg(d, a, b, c, blocks[2], 9, -51403784);\n                c = gg(c, d, a, b, blocks[7], 14, 1735328473);\n                b = gg(b, c, d, a, blocks[12], 20, -1926607734);\n                // endregion\n                // region round 3\n                a = hh(a, b, c, d, blocks[5], 4, -378558);\n                d = hh(d, a, b, c, blocks[8], 11, -2022574463);\n                c = hh(c, d, a, b, blocks[11], 16, 1839030562);\n                b = hh(b, c, d, a, blocks[14], 23, -35309556);\n\n                a = hh(a, b, c, d, blocks[1], 4, -1530992060);\n                d = hh(d, a, b, c, blocks[4], 11, 1272893353);\n                c = hh(c, d, a, b, blocks[7], 16, -155497632);\n                b = hh(b, c, d, a, blocks[10], 23, -1094730640);\n\n                a = hh(a, b, c, d, blocks[13], 4, 681279174);\n                d = hh(d, a, b, c, blocks[0], 11, -358537222);\n                c = hh(c, d, a, b, blocks[3], 16, -722521979);\n                b = hh(b, c, d, a, blocks[6], 23, 76029189);\n\n                a = hh(a, b, c, d, blocks[9], 4, -640364487);\n                d = hh(d, a, b, c, blocks[12], 11, -421815835);\n                c = hh(c, d, a, b, blocks[15], 16, 530742520);\n                b = hh(b, c, d, a, blocks[2], 23, -995338651);\n                // endregion\n                // region round 4\n                a = ii(a, b, c, d, blocks[0], 6, -198630844);\n                d = ii(d, a, b, c, blocks[7], 10, 1126891415);\n                c = ii(c, d, a, b, blocks[14], 15, -1416354905);\n                b = ii(b, c, d, a, blocks[5], 21, -57434055);\n\n                a = ii(a, b, c, d, blocks[12], 6, 1700485571);\n                d = ii(d, a, b, c, blocks[3], 10, -1894986606);\n                c = ii(c, d, a, b, blocks[10], 15, -1051523);\n                b = ii(b, c, d, a, blocks[1], 21, -2054922799);\n\n                a = ii(a, b, c, d, blocks[8], 6, 1873313359);\n                d = ii(d, a, b, c, blocks[15], 10, -30611744);\n                c = ii(c, d, a, b, blocks[6], 15, -1560198380);\n                b = ii(b, c, d, a, blocks[13], 21, 1309151649);\n\n                a = ii(a, b, c, d, blocks[4], 6, -145523070);\n                d = ii(d, a, b, c, blocks[11], 10, -1120210379);\n                c = ii(c, d, a, b, blocks[2], 15, 718787259);\n                b = ii(b, c, d, a, blocks[9], 21, -343485551);\n                // endregion\n                state[0] = unsignedModule2PowerOf32Addition(a, state[0]);\n                state[1] = unsignedModule2PowerOf32Addition(b, state[1]);\n                state[2] = unsignedModule2PowerOf32Addition(c, state[2]);\n                state[3] = unsignedModule2PowerOf32Addition(d, state[3]);\n                return state;\n            };\n            // / endregion\n            /**\n             * Converts given character to its corresponding hex code\n             * representation.\n             * @param character - Character to convert.\n             * @returns Converted hex code string.\n             */\n            var convertCharactorToHexCode = function convertCharactorToHexCode(character) {\n                var hexString = '';\n                for (var round = 0; round < 4; round++) {\n                    hexString += hexCharacters[character >> round * 8 + 4 & 0x0F] + hexCharacters[character >> round * 8 & 0x0F];\n                }return hexString;\n            };\n            /**\n             * Converts given byte array to its corresponding hex code as string.\n             * @param value - Array of characters to convert.\n             * @returns Converted hex code.\n             */\n            var convertToHexCode = function convertToHexCode(value) {\n                for (var index = 0; index < value.length; index++) {\n                    value[index] = convertCharactorToHexCode(value[index]);\n                }return value.join('');\n            };\n            /**\n             * There needs to be support for unicode here, unless we pretend that\n             * we can redefine the md5 algorithm for multi-byte characters\n             * (perhaps by adding every four 16-bit characters and shortening the\n             * sum to 32 bits). Otherwise I suggest performing md5 as if every\n             * character was two bytes--e.g., 0040 0025 = @%--but then how will an\n             * ordinary md5 sum be matched? There is no way to standardize text\n             * to something like utf-8 before transformation; speed cost is\n             * utterly prohibitive. The JavaScript standard itself needs to look\n             * at this: it should start providing access to strings as preformed\n             * utf-8 8-bit unsigned value arrays.\n             * @param value - Value to process with each block.\n             * @returns Converted byte array.\n             */\n            var handleBlock = function handleBlock(value) {\n                var blocks = [];\n                for (var blockNumber = 0; blockNumber < 64; blockNumber += 4) {\n                    blocks[blockNumber >> 2] = value.charCodeAt(blockNumber) + (value.charCodeAt(blockNumber + 1) << 8) + (value.charCodeAt(blockNumber + 2) << 16) + (value.charCodeAt(blockNumber + 3) << 24);\n                }return blocks;\n            };\n            // endregion\n            /**\n             * Triggers the main algorithm to calculate the md5 representation of\n             * given value.\n             * @param value - String to convert to its md5 representation.\n             * @returns Array of blocks.\n             */\n            var main = function main(value) {\n                var length = value.length;\n                var state = [1732584193, -271733879, -1732584194, 271733878];\n                var blockNumber = void 0;\n                for (blockNumber = 64; blockNumber <= value.length; blockNumber += 64) {\n                    cycle(state, handleBlock(value.substring(blockNumber - 64, blockNumber)));\n                }value = value.substring(blockNumber - 64);\n                var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n                for (blockNumber = 0; blockNumber < value.length; blockNumber++) {\n                    tail[blockNumber >> 2] |= value.charCodeAt(blockNumber) << (blockNumber % 4 << 3);\n                }tail[blockNumber >> 2] |= 0x80 << (blockNumber % 4 << 3);\n                if (blockNumber > 55) {\n                    cycle(state, tail);\n                    for (var index = 0; index < 16; index++) {\n                        tail[index] = 0;\n                    }\n                }\n                tail[14] = length * 8;\n                cycle(state, tail);\n                return state;\n            };\n            // region final call\n            if (convertToHexCode(main('hello')) !== '5d41402abc4b2a76b9719d911017c592')\n                /**\n                 * This function is much faster, so if possible we use it. Some IEs\n                 * are the only ones I know of that need the idiotic second\n                 * function, generated by an if clause in the end.\n                 * @private\n                 * @param first - First operand to add.\n                 * @param second - Second operant to add.\n                 * @returns The sum of both given operands.\n                */\n                unsignedModule2PowerOf32Addition = function unsignedModule2PowerOf32Addition(first, second) {\n                    var lsw = (first & 0xFFFF) + (second & 0xFFFF);\n                    var msw = (first >> 16) + (second >> 16) + (lsw >> 16);\n                    return msw << 16 | lsw & 0xFFFF;\n                };\n            // IgnoreTypeCheck\n            return convertToHexCode(main(onlyAscii ? value : unescape(encodeURIComponent(value))));\n            // endregion\n        }\n        /**\n         * Normalizes given phone number for automatic dialing mechanisms.\n         * @param phoneNumber - Number to normalize.\n         * @returns Normalized number.\n         */\n\n    }, {\n        key: 'stringNormalizePhoneNumber',\n        value: function stringNormalizePhoneNumber(phoneNumber) {\n            if (typeof phoneNumber === 'string' || typeof phoneNumber === 'number') return ('' + phoneNumber).replace(/[^0-9]*\\+/, '00').replace(/[^0-9]+/g, '');\n            return '';\n        }\n        /**\n         * Represents given phone number. NOTE: Currently only support german phone\n         * numbers.\n         * @param phoneNumber - Number to format.\n         * @returns Formatted number.\n         */\n\n    }, {\n        key: 'stringRepresentPhoneNumber',\n        value: function stringRepresentPhoneNumber(phoneNumber) {\n            if (['number', 'string'].includes(Tools.determineType(phoneNumber)) && phoneNumber) {\n                // Represent country code and leading area code zero.\n                phoneNumber = ('' + phoneNumber).replace(/^(00|\\+)([0-9]+)-([0-9-]+)$/, '+$2 (0) $3');\n                // Add German country code if not exists.\n                phoneNumber = phoneNumber.replace(/^0([1-9][0-9-]+)$/, '+49 (0) $1');\n                // Separate area code from base number.\n                phoneNumber = phoneNumber.replace(/^([^-]+)-([0-9-]+)$/, '$1 / $2');\n                // Partition base number in one triple and tuples or tuples only.\n                return phoneNumber.replace(/^(.*?)([0-9]+)(-?[0-9]*)$/, function (match, prefix, number, suffix) {\n                    return prefix + (number.length % 2 === 0 ? number.replace(/([0-9]{2})/g, '$1 ') : number.replace(/^([0-9]{3})([0-9]+)$/, function (match, triple, rest) {\n                        return triple + ' ' + rest.replace(/([0-9]{2})/g, '$1 ').trim();\n                    }) + suffix).trim();\n                }).trim();\n            }\n            return '';\n        }\n        /**\n         * Decodes all html symbols in text nodes in given html string.\n         * @param htmlString - HTML string to decode.\n         * @returns Decoded html string.\n         */\n\n    }, {\n        key: 'stringDecodeHTMLEntities',\n        value: function stringDecodeHTMLEntities(htmlString) {\n            if ('document' in $.global) {\n                var textareaDomNode = $.global.document.createElement('textarea');\n                textareaDomNode.innerHTML = htmlString;\n                return textareaDomNode.value;\n            }\n            return null;\n        }\n    }, {\n        key: 'numberIsNotANumber',\n        value: function numberIsNotANumber(object) {\n            return Tools.determineType(object) === 'number' && isNaN(object);\n        }\n        /**\n         * Rounds a given number accurate to given number of digits.\n         * @param number - The number to round.\n         * @param digits - The number of digits after comma.\n         * @returns Returns the rounded number.\n         */\n\n    }, {\n        key: 'numberRound',\n        value: function numberRound(number) {\n            var digits = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n            return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);\n        }\n        // / endregion\n        // / region data transfer\n        /**\n         * Send given data to a given iframe.\n         * @param target - Name of the target iframe or the target iframe itself.\n         * @param url - URL to send to data to.\n         * @param data - Data holding object to send data to.\n         * @param requestType - The forms action attribute value. If nothing is\n         * provided \"post\" will be used as default.\n         * @param removeAfterLoad - Indicates if created iframe should be removed\n         * right after load event. Only works if an iframe object is given instead\n         * of a simple target name.\n         * @returns Returns the given target.\n         */\n\n    }, {\n        key: 'sendToIFrame',\n        value: function sendToIFrame(target, url, data) {\n            var requestType = arguments.length <= 3 || arguments[3] === undefined ? 'post' : arguments[3];\n            var removeAfterLoad = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\n            var targetName = typeof target === 'string' ? target : target.attr('name');\n            var $formDomNode = $('<form>').attr({\n                action: url,\n                method: requestType,\n                target: targetName\n            });\n            for (var _name4 in data) {\n                if (data.hasOwnProperty(_name4)) $formDomNode.append($('<input>').attr({\n                    type: 'hidden',\n                    name: _name4,\n                    value: data[_name4]\n                }));\n            }$formDomNode.submit().remove();\n            if (removeAfterLoad && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && 'on' in target)\n                // IgnoreTypeCheck\n                target.on('load', function () {\n                    return target.remove();\n                });\n            return targetName;\n        }\n    }]);\n\n    return Tools;\n}();\n// endregion\n// region handle $ extending\n\n\nTools.abbreviations = ['html', 'id', 'url', 'us', 'de', 'api', 'href'];\nTools.animationEndEventNames = 'animationend webkitAnimationEnd ' + 'oAnimationEnd MSAnimationEnd';\nTools.classToTypeMapping = {\n    '[object Array]': 'array',\n    '[object Boolean]': 'boolean',\n    '[object Date]': 'date',\n    '[object Error]': 'error',\n    '[object Function]': 'function',\n    '[object Number]': 'number',\n    '[object Object]': 'object',\n    '[object RegExp]': 'regexp',\n    '[object String]': 'string'\n};\nTools.keyCode = {\n    BACKSPACE: 8,\n    COMMA: 188,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    LEFT: 37,\n    NUMPAD_ADD: 107,\n    NUMPAD_DECIMAL: 110,\n    NUMPAD_DIVIDE: 111,\n    NUMPAD_ENTER: 108,\n    NUMPAD_MULTIPLY: 106,\n    NUMPAD_SUBTRACT: 109,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    PERIOD: 190,\n    RIGHT: 39,\n    SPACE: 32,\n    TAB: 9,\n    UP: 38\n};\n\nTools.maximalSupportedInternetExplorerVersion = function () {\n    if (!('document' in $.global)) return 0;\n    var div = $.global.document.createElement('div');\n    var version = void 0;\n    for (version = 0; version < 10; version++) {\n        /*\n            NOTE: We split html comment sequences to avoid wrong\n            interpretation if this code is embedded in markup.\n            NOTE: Internet Explorer 9 and lower sometimes doesn't\n            understand conditional comments wich doesn't starts with a\n            whitespace. If the conditional markup isn't in a commend.\n            Otherwise there shouldn't be any whitespace!\n        */\n        /* eslint-disable no-useless-concat */\n        div.innerHTML = '<!' + ('--[if gt IE ' + version + ']><i></i><![e') + 'ndif]-' + '->';\n        /* eslint-enable no-useless-concat */\n        if (div.getElementsByTagName('i').length === 0) break;\n    }\n    // Try special detection for internet explorer 10 and 11.\n    if (version === 0 && 'navigator' in $.global) if ($.global.navigator.appVersion.includes('MSIE 10')) return 10;else if ($.global.navigator.userAgent.includes('Trident') && $.global.navigator.userAgent.includes('rv:11')) return 11;\n    return version;\n}();\n\nTools.noop = 'noop' in $ ? $.noop : function () {};\nTools.specialRegexSequences = ['-', '[', ']', '(', ')', '^', '$', '*', '+', '.', '{', '}'];\nTools.transitionEndEventNames = 'transitionend ' + 'webkitTransitionEnd oTransitionEnd MSTransitionEnd';\nTools.consoleMethodNames = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];\nTools._javaScriptDependentContentHandled = false;\nTools._name = 'Tools';\nexports.default = Tools;\nif ('fn' in $) $.fn.Tools = function () {\n    return new Tools().controller(Tools, arguments, this);\n};\n$.Tools = function () {\n    return new Tools().controller(Tools, arguments);\n};\n$.Tools.class = Tools;\n// / region prop fix for comments and text nodes\nif ('fn' in $) {\n    (function () {\n        var nativePropFunction = $.fn.prop;\n        /**\n         * JQuery's native prop implementation ignores properties for text nodes,\n         * comments and attribute nodes.\n         * @param key - Name of property to retrieve from current dom node.\n         * @param value - Value to set for given property by name.\n         * @returns Returns value if used as getter or current dom node if used as\n         * setter.\n         */\n        $.fn.prop = function (key, value) {\n            if (arguments.length < 3 && this.length && ['#text', '#comment'].includes(this[0].nodeName) && key in this[0]) {\n                if (arguments.length === 1) return this[0][key];\n                if (arguments.length === 2) {\n                    this[0][key] = value;\n                    return this;\n                }\n            }\n            return nativePropFunction.apply(this, arguments);\n        };\n    })();\n}\n// / endregion\n// endregion\n// region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! ./~/webpack/buildin/module.js */ 2)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ function(module, exports) {

	eval("if(typeof __WEBPACK_EXTERNAL_MODULE_3__ === 'undefined') {var e = new Error(\"Cannot find module \\\"jQuery\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiPzBjYjgiXSwic291cmNlc0NvbnRlbnQiOlsiaWYodHlwZW9mIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfM19fID09PSAndW5kZWZpbmVkJykge3ZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlIFxcXCJqUXVlcnlcXFwiXCIpOyBlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7IHRocm93IGU7fVxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzNfXztcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwialF1ZXJ5XCJcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ])
});
;