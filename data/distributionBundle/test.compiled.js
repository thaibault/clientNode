
// #!/usr/bin/env node
// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = function (callback) {
    var roundTypes = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var closeWindow = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    if (testRan) throw new Error('You have to register your tests immediately after importing ' + 'the client node library.');
    if (!testRegistered) {
        testRegistered = true;
        tests = [];
    }
    tests.push({ callback: callback, closeWindow: closeWindow, roundTypes: roundTypes });
    return tests;
};

var _browserAPI = require('weboptimizer/browserAPI');

var _browserAPI2 = _interopRequireDefault(_browserAPI);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

// endregion
// region determine technology specific qunit implementation

// endregion
// region types

// endregion
// region declaration
var QUnit = void 0;
if (typeof TARGET_TECHNOLOGY === 'undefined' || TARGET_TECHNOLOGY === 'node') QUnit = require('qunit-cli');else QUnit = require('script!qunitjs') && window.QUnit;
// endregion
// region default test specification
var tests = [{ callback: function callback(roundType, targetTechnology, $, browserAPI, tools, $bodyDomNode) {
        var _this = this;

        this.module('tools (' + roundType + ')');
        // region tests
        // / region public methods
        // // region special
        this.test('constructor (' + roundType + ')', function (assert) {
            return assert.ok(tools);
        });
        this.test('destructor (' + roundType + ')', function (assert) {
            return assert.strictEqual(tools.destructor(), tools);
        });
        this.test('initialize (' + roundType + ')', function (assert) {
            var secondToolsInstance = $.Tools({ logging: true });
            var thirdToolsInstance = $.Tools({
                domNodeSelectorPrefix: 'body.{1} div.{1}' });

            assert.notOk(tools._options.logging);
            assert.ok(secondToolsInstance._options.logging);
            assert.strictEqual(thirdToolsInstance._options.domNodeSelectorPrefix, 'body.tools div.tools');
        });
        // // endregion
        // // region object orientation
        this.test('controller (' + roundType + ')', function (assert) {
            assert.strictEqual(tools.controller(tools, []), tools);
            assert.strictEqual(tools.controller($.Tools.class, [], $('body')).constructor.name, tools.constructor.name);
        });
        // // endregion
        // // region mutual exclusion
        this.test('acquireLock|releaseLock (' + roundType + ')', function () {
            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {
                var testValue, done;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                testValue = false;

                                tools.acquireLock('test', function () {
                                    testValue = true;
                                });
                                assert.ok(testValue);
                                assert.ok(tools.acquireLock('test', function () {
                                    testValue = false;
                                }) instanceof Promise);
                                assert.ok(testValue);
                                assert.ok($.Tools().releaseLock('test') instanceof Promise);
                                assert.ok(testValue);
                                assert.ok(tools.releaseLock('test') instanceof Promise);
                                assert.notOk(testValue);
                                assert.ok(tools.releaseLock('test') instanceof Promise);
                                _context2.next = 12;
                                return tools.acquireLock('test', function () {
                                    testValue = true;
                                });

                            case 12:
                                assert.ok(testValue);
                                assert.ok(tools.acquireLock('test', function () {
                                    testValue = false;
                                }) instanceof Promise);
                                assert.notOk(testValue);
                                assert.ok(tools.acquireLock('test', function () {
                                    testValue = true;
                                }) instanceof Promise);
                                assert.notOk(testValue);
                                tools.releaseLock('test');
                                assert.ok(testValue);
                                done = assert.async();

                                tools.acquireLock('test').then(function () {
                                    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(result) {
                                        return regeneratorRuntime.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        assert.strictEqual(result, 'test');
                                                        setTimeout(function () {
                                                            return tools.releaseLock('test');
                                                        }, 0);
                                                        _context.next = 4;
                                                        return tools.acquireLock('test');

                                                    case 4:
                                                        result = _context.sent;

                                                        assert.strictEqual(result, 'test');
                                                        setTimeout(function () {
                                                            return tools.releaseLock('test');
                                                        }, 0);
                                                        _context.next = 9;
                                                        return tools.acquireLock('test', function () {
                                                            return new Promise(function (resolve) {
                                                                return setTimeout(function () {
                                                                    testValue = false;
                                                                    resolve(testValue);
                                                                }, 0);
                                                            });
                                                        });

                                                    case 9:
                                                        result = _context.sent;

                                                        assert.notOk(testValue);
                                                        done();

                                                    case 12:
                                                    case 'end':
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, _this);
                                    }));

                                    return function (_x2) {
                                        return _ref2.apply(this, arguments);
                                    };
                                }());
                                tools.releaseLock('test');

                            case 22:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        // // endregion
        // // region boolean
        this.test('isNumeric (' + roundType + ')', function (assert) {
            var _arr = [0, 1, '-10', '0', 0xFF, '0xFF', '8e5', '3.1415', +10];

            for (var _i = 0; _i < _arr.length; _i++) {
                var test = _arr[_i];
                assert.ok($.Tools.class.isNumeric(test));
            }var _arr2 = [null, undefined, false, true, '', 'a', {}, /a/, '-0x42', '7.2acdgs', NaN, Infinity];
            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var _test = _arr2[_i2];
                assert.notOk($.Tools.class.isNumeric(_test));
            }
        });
        this.test('isWindow (' + roundType + ')', function (assert) {
            assert.ok($.Tools.class.isWindow(browserAPI.window));
            var _arr3 = [null, {}, browserAPI];
            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var test = _arr3[_i3];
                assert.notOk($.Tools.class.isWindow(test));
            }
        });
        this.test('isArrayLike (' + roundType + ')', function (assert) {
            var _arr4 = [[], window.document.querySelectorAll('*')];

            for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                var test = _arr4[_i4];
                assert.ok($.Tools.class.isArrayLike(test));
            }var _arr5 = [{}, null, undefined, false, true, /a/];
            for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
                var _test2 = _arr5[_i5];
                assert.notOk($.Tools.class.isArrayLike(_test2));
            }
        });
        this.test('isAnyMatching (' + roundType + ')', function (assert) {
            var _arr6 = [['', ['']], ['test', [/test/]], ['test', [/a/, /b/, /es/]], ['test', ['', 'test']]];

            for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
                var test = _arr6[_i6];
                assert.ok($.Tools.class.isAnyMatching.apply($.Tools, test));
            }var _arr7 = [['', []], ['test', [/tes$/]], ['test', [/^est/]], ['test', [/^est$/]], ['test', ['a']]];
            for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
                var _test3 = _arr7[_i7];
                assert.notOk($.Tools.class.isAnyMatching.apply($.Tools, _test3));
            }
        });
        this.test('isPlainObject (' + roundType + ')', function (assert) {
            var _arr8 = [{}, { a: 1 },
            /* eslint-disable no-new-object */
            new Object()
            /* eslint-enable no-new-object */
            ];

            for (var _i8 = 0; _i8 < _arr8.length; _i8++) {
                var okValue = _arr8[_i8];
                assert.ok($.Tools.class.isPlainObject(okValue));
            }var _arr9 = [new String(), Object, null, 0, 1, true, undefined];
            for (var _i9 = 0; _i9 < _arr9.length; _i9++) {
                var notOkValue = _arr9[_i9];
                assert.notOk($.Tools.class.isPlainObject(notOkValue));
            }
        });
        this.test('isFunction (' + roundType + ')', function (assert) {
            var _arr10 = [Object, new Function('return 1'), function () {}, function () {}];

            for (var _i10 = 0; _i10 < _arr10.length; _i10++) {
                var okValue = _arr10[_i10];
                assert.ok($.Tools.class.isFunction(okValue));
            }var _arr11 = [null, false, 0, 1, undefined, {}, new Boolean()];
            for (var _i11 = 0; _i11 < _arr11.length; _i11++) {
                var notOkValue = _arr11[_i11];
                assert.notOk($.Tools.class.isFunction(notOkValue));
            }
        });
        // // endregion
        // // region language fixes
        this.test('mouseOutEventHandlerFix (' + roundType + ')', function (assert) {
            return assert.ok($.Tools.class.mouseOutEventHandlerFix(function () {}));
        });
        // // endregion
        // // region logging
        this.test('log (' + roundType + ')', function (assert) {
            return assert.strictEqual(tools.log('test'), tools);
        });
        this.test('info (' + roundType + ')', function (assert) {
            return assert.strictEqual(tools.info('test {0}'), tools);
        });
        this.test('debug (' + roundType + ')', function (assert) {
            return assert.strictEqual(tools.debug('test'), tools);
        });
        // NOTE: This test breaks javaScript modules in strict mode.
        this.skip(roundType + '-error', function (assert) {
            return assert.strictEqual(tools.error('ignore this error, it is only a {1}', 'test'), tools);
        });
        this.test('warn (' + roundType + ')', function (assert) {
            return assert.strictEqual(tools.warn('test'), tools);
        });
        this.test('show (' + roundType + ')', function (assert) {
            var _arr12 = [[1, '1 (Type: "number")'], [null, 'null (Type: "null")'], [/a/, '/a/ (Type: "regexp")'], ['hans', 'hans (Type: "string")'], [{ A: 'a', B: 'b' }, 'A: a (Type: "string")\nB: b (Type: "string")']];

            for (var _i12 = 0; _i12 < _arr12.length; _i12++) {
                var test = _arr12[_i12];
                assert.strictEqual($.Tools.class.show(test[0]), test[1]);
            }assert.ok(new RegExp(
            /* eslint-disable no-control-regex */
            '^(.|\n|\r|\u2028|\u2029)+\\(Type: "function"\\)$').test($.Tools.class.show($.Tools)));
            /* eslint-enable no-control-regex */
        });
        // // endregion
        // // region dom node handling
        if (roundType === 'withJQuery') {
            this.test('getStyle (' + roundType + ')', function (assert) {
                var _arr13 = [['<span>', {}], ['<span>hans</span>', {}], ['<span style="display:block"></span>', { display: 'block' }], ['<span style="display:block;float:left"></span>', {
                    display: 'block', float: 'left'
                }]];

                for (var _i13 = 0; _i13 < _arr13.length; _i13++) {
                    var test = _arr13[_i13];
                    var $domNode = $(test[0]);
                    $bodyDomNode.append($domNode);
                    var styles = $domNode.Tools('getStyle');
                    for (var propertyName in test[1]) {
                        if (test[1].hasOwnProperty(propertyName)) {
                            assert.ok(styles.hasOwnProperty(propertyName));
                            assert.strictEqual(styles[propertyName], test[1][propertyName]);
                        }
                    }$domNode.remove();
                }
            });
            this.test('getText (' + roundType + ')', function (assert) {
                var _arr14 = [['<div>', ''], ['<div>hans</div>', 'hans'], ['<div><div>hans</div</div>', ''], ['<div>hans<div>peter</div></div>', 'hans']];

                for (var _i14 = 0; _i14 < _arr14.length; _i14++) {
                    var test = _arr14[_i14];
                    assert.strictEqual($(test[0]).Tools('getText'), test[1]);
                }
            });
            this.test('normalizeClassNames (' + roundType + ')', function (assert) {
                assert.strictEqual($('<div>').Tools('normalizeClassNames').$domNode.prop('outerHTML'), $('<div>').prop('outerHTML'));
                assert.strictEqual($('<div class>').Tools('normalizeClassNames').$domNode.html(), $('<div>').html());
                assert.strictEqual($('<div class="">').Tools('normalizeClassNames').$domNode.html(), $('<div>').html());
                assert.strictEqual($('<div class="a">').Tools('normalizeClassNames').$domNode.prop('outerHTML'), $('<div class="a">').prop('outerHTML'));
                assert.strictEqual($('<div class="b a">').Tools('normalizeClassNames').$domNode.prop('outerHTML'), $('<div class="a b">').prop('outerHTML'));
                assert.strictEqual($('<div class="b a"><pre class="c b a"></pre></div>').Tools('normalizeClassNames').$domNode.prop('outerHTML'), $('<div class="a b"><pre class="a b c"></pre></div>').prop('outerHTML'));
            });
            this.test('normalizeStyles (' + roundType + ')', function (assert) {
                assert.strictEqual($('<div>').Tools('normalizeStyles').$domNode.prop('outerHTML'), $('<div>').prop('outerHTML'));
                assert.strictEqual($('<div style>').Tools('normalizeStyles').$domNode.html(), $('<div>').html());
                assert.strictEqual($('<div style="">').Tools('normalizeStyles').$domNode.html(), $('<div>').html());
                assert.strictEqual($('<div style="border: 1px solid  red ;">').Tools('normalizeStyles').$domNode.prop('outerHTML'), $('<div style="border:1px solid red">').prop('outerHTML'));
                assert.strictEqual($('<div style="width: 50px;height: 100px;">').Tools('normalizeStyles').$domNode.prop('outerHTML'), $('<div style="height:100px;width:50px">').prop('outerHTML'));
                assert.strictEqual($('<div style=";width: 50px ; height:100px">').Tools('normalizeStyles').$domNode.prop('outerHTML'), $('<div style="height:100px;width:50px">').prop('outerHTML'));
                assert.strictEqual($('<div style="width:10px;height:50px">' + '    <pre style=";;width:2px;height:1px; color: red; ">' + '</pre>' + '</div>').Tools('normalizeStyles').$domNode.prop('outerHTML'), $('<div style="height:50px;width:10px">' + '    <pre style="color:red;height:1px;width:2px"></pre>' + '</div>').prop('outerHTML'));
            });
            this.test('isEquivalentDom (' + roundType + ')', function (assert) {
                var _arr15 = [['test', 'test'], ['test test', 'test test'], ['<div>', '<div>'], ['<div class>', '<div>'], ['<div class="">', '<div>'], ['<div style>', '<div>'], ['<div style="">', '<div>'], ['<div></div>', '<div>'], ['<div class="a"></div>', '<div class="a"></div>'], [$('<a target="_blank" class="a"></a>'), '<a class="a" target="_blank"></a>'], ['<a target="_blank" class="a"></a>', '<a class="a" target="_blank"></a>'], ['<a target="_blank" class="a"><div b="3" a="2">' + '</div></a>', '<a class="a" target="_blank"><div a="2" b="3">' + '</div></a>'], ['<a target="_blank" class="b a">' + '   <div b="3" a="2"></div>' + '</a>', '<a class="a b" target="_blank">' + '   <div a="2" b="3"></div>' + '</a>'], ['<div>a</div><div>b</div>', '<div>a</div><div>b</div>'], ['<div>a</div>b', '<div>a</div>b'], ['<br>', '<br />'], ['<div><br><br /></div>', '<div><br /><br /></div>'], [' <div style="">' + 'german<!--deDE--><!--enUS: english --> ' + '</div>', ' <div style="">' + 'german<!--deDE--><!--enUS: english --> ' + '</div>'], ['a<br>', 'a<br />', true]];

                for (var _i15 = 0; _i15 < _arr15.length; _i15++) {
                    var test = _arr15[_i15];
                    assert.ok($.Tools.class.isEquivalentDom.apply(_this, test));
                }var _arr16 = [['test', ''], ['test', 'hans'], ['test test', 'testtest'], ['test test:', ''], ['<div class="a"></div>', '<div>'], [$('<a class="a"></a>'), '<a class="a" target="_blank"></a>'], ['<a target="_blank" class="a"><div a="2"></div></a>', '<a class="a" target="_blank"></a>'], ['<div>a</div>b', '<div>a</div>c'], [' <div>a</div>', '<div>a</div>'], ['<div>a</div><div>bc</div>', '<div>a</div><div>b</div>'], ['text', 'text a'], ['text', 'text a'], ['text', 'text a & +']];
                for (var _i16 = 0; _i16 < _arr16.length; _i16++) {
                    var _test4 = _arr16[_i16];
                    assert.notOk($.Tools.class.isEquivalentDom.apply(_this, _test4));
                }
            });
        }
        if (roundType === 'withJQuery') this.test('getPositionRelativeToViewport (' + roundType + ')', function (assert) {
            return assert.ok(['above', 'left', 'right', 'below', 'in'].includes(tools.getPositionRelativeToViewport()));
        });
        this.test('generateDirectiveSelector (' + roundType + ')', function (assert) {
            var _arr17 = [['a-b', 'a-b, .a-b, [a-b], [data-a-b], [x-a-b], [a\\:b], ' + '[a_b]'], ['aB', 'a-b, .a-b, [a-b], [data-a-b], [x-a-b], [a\\:b], ' + '[a_b]'], ['a', 'a, .a, [a], [data-a], [x-a]'], ['aa', 'aa, .aa, [aa], [data-aa], [x-aa]'], ['aaBB', 'aa-bb, .aa-bb, [aa-bb], [data-aa-bb], [x-aa-bb], ' + '[aa\\:bb], [aa_bb]'], ['aaBbCcDd', 'aa-bb-cc-dd, .aa-bb-cc-dd, [aa-bb-cc-dd], ' + '[data-aa-bb-cc-dd], [x-aa-bb-cc-dd], ' + '[aa\\:bb\\:cc\\:dd], [aa_bb_cc_dd]'], ['mceHREF', 'mce-href, .mce-href, [mce-href], [data-mce-href], ' + '[x-mce-href], [mce\\:href], [mce_href]']];

            for (var _i17 = 0; _i17 < _arr17.length; _i17++) {
                var test = _arr17[_i17];
                assert.strictEqual($.Tools.class.generateDirectiveSelector(test[0]), test[1]);
            }
        });
        if (roundType === 'withJQuery') this.test('removeDirective (' + roundType + ')', function (assert) {
            var $localBodyDomNode = $bodyDomNode.Tools('removeDirective', 'a');
            assert.equal($localBodyDomNode.Tools().removeDirective('a'), $localBodyDomNode);
        });
        this.test('getNormalizedDirectiveName (' + roundType + ')', function (assert) {
            var _arr18 = [['data-a', 'a'], ['x-a', 'a'], ['data-a-bb', 'aBb'], ['x:a:b', 'aB']];

            for (var _i18 = 0; _i18 < _arr18.length; _i18++) {
                var test = _arr18[_i18];
                assert.equal($.Tools.class.getNormalizedDirectiveName(test[0]), test[1]);
            }
        });
        if (roundType === 'withJQuery') this.test('getDirectiveValue (' + roundType + ')', function (assert) {
            return assert.equal($('body').Tools('getDirectiveValue', 'a'), null);
        });
        this.test('sliceDomNodeSelectorPrefix (' + roundType + ')', function (assert) {
            assert.strictEqual(tools.sliceDomNodeSelectorPrefix('body div'), 'div');
            assert.strictEqual($.Tools({
                domNodeSelectorPrefix: 'body div'
            }).sliceDomNodeSelectorPrefix('body div'), '');
            assert.strictEqual($.Tools({
                domNodeSelectorPrefix: ''
            }).sliceDomNodeSelectorPrefix('body div'), 'body div');
        });
        this.test('getDomNodeName (' + roundType + ')', function (assert) {
            var _arr19 = [['div', 'div'], ['<div>', 'div'], ['<div />', 'div'], ['<div></div>', 'div'], ['a', 'a'], ['<a>', 'a'], ['<a />', 'a'], ['<a></a>', 'a']];

            for (var _i19 = 0; _i19 < _arr19.length; _i19++) {
                var test = _arr19[_i19];
                assert.strictEqual($.Tools.class.getDomNodeName(test[0]), test[1]);
            }
        });
        if (roundType === 'withJQuery') this.test('grabDomNode (' + roundType + ')', function (assert) {
            var _arr20 = [[[{
                qunit: 'body div#qunit',
                qunitFixture: 'body div#qunit-fixture'
            }], {
                qunit: $('body div#qunit'),
                qunitFixture: $('body div#qunit-fixture'),
                parent: $('body')
            }], [[{
                qunit: 'div#qunit',
                qunitFixture: 'div#qunit-fixture'
            }], {
                parent: $('body'),
                qunit: $('body div#qunit'),
                qunitFixture: $('body div#qunit-fixture')
            }], [[{
                qunit: 'div#qunit',
                qunitFixture: 'div#qunit-fixture'
            }, 'body'], {
                parent: $('body'),
                qunit: $('body').find('div#qunit'),
                qunitFixture: $('body').find('div#qunit-fixture')
            }]];

            for (var _i20 = 0; _i20 < _arr20.length; _i20++) {
                var test = _arr20[_i20];
                var $domNodes = tools.grabDomNode.apply(tools, test[0]);
                delete $domNodes.window;
                delete $domNodes.document;
                assert.deepEqual($domNodes, test[1]);
            }
        });
        // // endregion
        // // region scope
        this.test('isolateScope (' + roundType + ')', function (assert) {
            assert.deepEqual($.Tools.class.isolateScope({}), {});
            assert.deepEqual($.Tools.class.isolateScope({ a: 2 }), { a: 2 });
            assert.deepEqual($.Tools.class.isolateScope({
                a: 2, b: { a: [1, 2] }
            }), { a: 2, b: { a: [1, 2] } });
            var scope = function scope() {
                this.a = 2;
            };
            scope.prototype = { b: 2, _a: 5 };
            scope = new scope();
            assert.deepEqual($.Tools.class.isolateScope(scope), {
                _a: 5, a: 2, b: undefined
            });
            scope.b = 3;
            assert.deepEqual($.Tools.class.isolateScope(scope), { _a: 5, a: 2, b: 3 });
            assert.deepEqual($.Tools.class.isolateScope(scope, []), {
                _a: undefined, a: 2, b: 3 });
            scope._a = 6;
            assert.deepEqual($.Tools.class.isolateScope(scope), { _a: 6, a: 2, b: 3 });
            scope = function scope() {
                this.a = 2;
            };
            scope.prototype = { b: 3 };
            assert.deepEqual($.Tools.class.isolateScope(new scope(), ['b']), { a: 2, b: 3 });
            assert.deepEqual($.Tools.class.isolateScope(new scope()), {
                a: 2, b: undefined
            });
        });
        this.test('determineUniqueScopeName (' + roundType + ')', function (assert) {
            assert.ok($.Tools.class.determineUniqueScopeName().startsWith('callback'));
            assert.ok($.Tools.class.determineUniqueScopeName('hans').startsWith('hans'));
            assert.ok($.Tools.class.determineUniqueScopeName('hans', '', {}).startsWith('hans'));
            assert.strictEqual($.Tools.class.determineUniqueScopeName('hans', '', {}, 'peter'), 'peter');
            assert.ok($.Tools.class.determineUniqueScopeName('hans', '', { peter: 2 }, 'peter').startsWith('hans'));
            var name = $.Tools.class.determineUniqueScopeName('hans', 'klaus', { peter: 2 }, 'peter');
            assert.ok(name.startsWith('hans'));
            assert.ok(name.endsWith('klaus'));
            assert.ok(name.length > 'hans'.length + 'klaus'.length);
        });
        // // endregion
        // // region function handling
        this.test('getMethod (' + roundType + ')', function (assert) {
            var testObject = { value: false };

            tools.getMethod(function () {
                testObject.value = true;
            })();
            assert.ok(testObject.value);
            tools.getMethod(function () {
                this.value = false;
            }, testObject)();
            assert.notOk(testObject.value);

            assert.strictEqual(tools.getMethod(function (five, two, three) {
                return five + two + three;
            }, testObject, 5)(2, 3), 10);
        });
        this.test('identity (' + roundType + ')', function (assert) {
            var _arr21 = [[2, 2], ['', ''], [undefined, undefined], [null, null], ['hans', 'hans']];

            for (var _i21 = 0; _i21 < _arr21.length; _i21++) {
                var test = _arr21[_i21];
                assert.strictEqual($.Tools.class.identity(test[0]), test[1]);
            }assert.ok($.Tools.class.identity({}) !== {});
            var testObject = {};
            assert.strictEqual($.Tools.class.identity(testObject), testObject);
        });
        this.test('invertArrayFilter (' + roundType + ')', function (assert) {
            assert.deepEqual($.Tools.class.invertArrayFilter($.Tools.class.arrayDeleteEmptyItems)([{ a: null }]), [{ a: null }]);
            assert.deepEqual($.Tools.class.invertArrayFilter($.Tools.class.arrayExtractIfMatches)(['a', 'b'], '^a$'), ['b']);
        });
        // // endregion
        // // region event
        this.test('debounce (' + roundType + ')', function (assert) {
            var testValue = false;
            $.Tools.class.debounce(function () {
                testValue = true;
            })();
            assert.ok(testValue);
            $.Tools.class.debounce(function () {
                testValue = false;
            }, 1000)();
            assert.notOk(testValue);
        });
        this.test('fireEvent (' + roundType + ')', function (assert) {
            assert.strictEqual($.Tools({ onClick: function onClick() {
                    return 2;
                } }).fireEvent('click', true), 2);
            assert.notOk($.Tools({ onClick: function onClick() {
                    return false;
                } }).fireEvent('click', true));
            assert.ok(tools.fireEvent('click'));
            tools.onClick = function () {
                return 3;
            };
            assert.strictEqual(tools.fireEvent('click'), true);
            assert.strictEqual(tools.fireEvent('click', true), true);
        });
        if (roundType === 'withJQuery') {
            this.test('on (' + roundType + ')', function (assert) {
                var testValue = false;
                assert.strictEqual(tools.on('body', 'click', function () {
                    testValue = true;
                })[0], $('body')[0]);

                $('body').trigger('click');
                assert.ok(testValue);
            });
            this.test('off (' + roundType + ')', function (assert) {
                var testValue = false;
                assert.strictEqual(tools.on('body', 'click', function () {
                    testValue = true;
                })[0], $('body')[0]);
                assert.strictEqual(tools.off('body', 'click')[0], $('body')[0]);

                $('body').trigger('click');
                assert.notOk(testValue);
            });
        }
        // // endregion
        // // region object
        this.test('determineType (' + roundType + ')', function (assert) {
            assert.strictEqual($.Tools.class.determineType(), 'undefined');
            var _arr22 = [[undefined, 'undefined'], [{}.notDefined, 'undefined'], [null, 'null'], [true, 'boolean'], [new Boolean(), 'boolean'], [3, 'number'], [new Number(3), 'number'], ['', 'string'], [new String(''), 'string'], ['test', 'string'], [new String('test'), 'string'], [function () {}, 'function'], [function () {}, 'function'], [[], 'array'],
            /* eslint-disable no-array-constructor */
            // IgnoreTypeCheck
            [new Array(), 'array'],
            /* eslint-enable no-array-constructor */
            [new Date(), 'date'], [new Error(), 'error'], [/test/, 'regexp']];
            for (var _i22 = 0; _i22 < _arr22.length; _i22++) {
                var test = _arr22[_i22];
                assert.strictEqual($.Tools.class.determineType(test[0]), test[1]);
            }
        });
        this.test('convertSubstringInPlainObject (' + roundType + ')', function (assert) {
            var _arr23 = [[{}, /a/, '', {}], [{ a: 'a' }, /a/, 'b', { a: 'b' }], [{ a: 'aa' }, /a/, 'b', { a: 'ba' }], [{ a: 'aa' }, /a/g, 'b', { a: 'bb' }], [{ a: { a: 'aa' } }, /a/g, 'b', { a: { a: 'bb' } }]];

            for (var _i23 = 0; _i23 < _arr23.length; _i23++) {
                var test = _arr23[_i23];
                assert.deepEqual($.Tools.class.convertSubstringInPlainObject(test[0], test[1], test[2]), test[3]);
            }
        });
        this.test('modifyObject (' + roundType + ')', function (assert) {
            var _arr24 = [[[{}, {}], {}, {}], [[{ a: 2 }, {}], { a: 2 }, {}], [[{ a: 2 }, { b: 1 }], { a: 2 }, { b: 1 }], [[{ a: 2 }, { __remove__: 'a' }], {}, {}], [[{ a: 2 }, { __remove__: ['a'] }], {}, {}], [[{ a: [2] }, { a: { __prepend__: 1 } }], { a: [1, 2] }, {}], [[{ a: [2] }, { a: { __remove__: 1 } }], { a: [2] }, {}], [[{ a: [2, 1] }, { a: { __remove__: 1 } }], { a: [2] }, {}], [[{ a: [2, 1] }, { a: { __remove__: [1, 2] } }], { a: [] }, {}], [[{ a: [1] }, { a: { __remove__: 1 } }], { a: [] }, {}], [[{ a: [1] }, { a: { __remove__: [1, 2] } }], { a: [] }, {}], [[{ a: [2] }, { a: { __append__: 1 } }], { a: [2, 1] }, {}], [[{ a: [2] }, { a: { __append__: [1, 2] } }], { a: [2, 1, 2] }, {}], [[{ a: [2] }, { a: { __append__: [1, 2] }, b: 1 }], { a: [2, 1, 2] }, { b: 1 }], [[{ a: [2] }, { a: { __prepend__: 1 } }, '_r', '_p'], { a: [2] }, { a: { __prepend__: 1 } }]];

            for (var _i24 = 0; _i24 < _arr24.length; _i24++) {
                var test = _arr24[_i24];
                assert.deepEqual($.Tools.class.modifyObject.apply($.Tools, test[0]), test[1]);
                assert.deepEqual(test[0][1], test[2]);
            }
        });
        this.test('extendObject (' + roundType + ')', function (assert) {
            var _arr25 = [[[[]], []], [[{}], {}], [[{ a: 1 }], { a: 1 }], [[{ a: 1 }, { a: 2 }], { a: 2 }], [[{}, { a: 1 }, { a: 2 }], { a: 2 }], [[{}, { a: 1 }, { a: 2 }], { a: 2 }], [[{ a: 1, b: { a: 1 } }, { a: 2, b: { b: 1 } }], { a: 2, b: { b: 1 } }], [[[1, 2], [1]], [1]], [[new Map()], new Map()], [[new Map([['a', 1]])], new Map([['a', 1]])], [[new Map([['a', 1]]), new Map([['a', 2]])], new Map([['a', 2]])], [[new Map(), new Map([['a', 1]]), new Map([['a', 2]])], new Map([['a', 2]])], [[new Map(), new Map([['a', 1]]), new Map([['a', 2]])], new Map([['a', 2]])], [[new Map([['a', 1], ['b', new Map([['a', 1]])]]), new Map([['a', 2], ['b', new Map([['b', 1]])]])], new Map([['a', 2], ['b', new Map([['b', 1]])]])], [[true, {}], {}], [[true, { a: 1, b: { a: 1 } }, { a: 2, b: { b: 1 } }], { a: 2, b: { a: 1, b: 1 } }], [[true, { a: 1, b: { a: [] } }, { a: 2, b: { b: 1 } }], { a: 2, b: { a: [], b: 1 } }], [[true, { a: { a: [1, 2] } }, { a: { a: [3, 4] } }], { a: { a: [3, 4] } }], [[true, { a: { a: [1, 2] } }, { a: { a: null } }], { a: { a: null } }], [[true, { a: { a: [1, 2] } }, { a: true }], { a: true }], [[true, { a: { _a: 1 } }, { a: { b: 2 } }], { a: { _a: 1, b: 2 } }], [[false, { _a: 1 }, { a: 2 }], { a: 2, _a: 1 }], [[true, { a: { a: [1, 2] } }, false], false], [[true, { a: { a: [1, 2] } }, undefined], undefined], [[true, { a: 1 }, { a: 2 }, { a: 3 }], { a: 3 }], [[true, [1], [1, 2]], [1, 2]], [[true, [1, 2], [1]], [1]], [[true, new Map()], new Map()], [[true, new Map([['a', 1], ['b', new Map([['a', 1]])]]), new Map([['a', 2], ['b', new Map([['b', 1]])]])], new Map([['a', 2], ['b', new Map([['a', 1], ['b', 1]])]])], [[true, new Map([['a', 1], ['b', new Map([['a', []]])]]), new Map([['a', 2], ['b', new Map([['b', 1]])]])], new Map([['a', 2], ['b', new Map([['a', []], ['b', 1]])]])], [[true, new Map([['a', new Map([['a', [1, 2]]])]]), new Map([['a', new Map([['a', [3, 4]]])]])], new Map([['a', new Map([['a', [3, 4]]])]])]];

            for (var _i25 = 0; _i25 < _arr25.length; _i25++) {
                var test = _arr25[_i25];
                assert.deepEqual($.Tools.class.extendObject.apply($.Tools, test[0]), test[1]);
            }assert.strictEqual($.Tools.class.extendObject([1, 2], undefined), undefined);
            assert.strictEqual($.Tools.class.extendObject([1, 2], null), null);
            var target = { a: [1, 2] };
            $.Tools.class.extendObject(true, target, { a: [3, 4] });
            assert.deepEqual(target, { a: [3, 4] });
        });
        this.test('unwrapProxy (' + roundType + ')', function (assert) {
            var _arr26 = [[{}, {}], [{ a: 'a' }, { a: 'a' }], [{ a: 'aa' }, { a: 'aa' }], [{ a: { __target__: 2 } }, { a: 2 }], [{ a: { __target__: { __target__: 2 } } }, { a: 2 }]];

            for (var _i26 = 0; _i26 < _arr26.length; _i26++) {
                var test = _arr26[_i26];
                assert.deepEqual($.Tools.class.unwrapProxy(test[0]), test[1]);
            }
        });
        this.test('addDynamicGetterAndSetter (' + roundType + ')', function (assert) {
            assert.strictEqual($.Tools.class.addDynamicGetterAndSetter(null), null);
            assert.strictEqual($.Tools.class.addDynamicGetterAndSetter(true), true);
            assert.notDeepEqual($.Tools.class.addDynamicGetterAndSetter({}), {});
            assert.ok($.Tools.class.addDynamicGetterAndSetter({}).__target__ instanceof Object);
            var mockup = {};
            assert.strictEqual($.Tools.class.addDynamicGetterAndSetter(mockup).__target__, mockup);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({}).__target__, {});
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: 1 }, function (value) {
                return value + 2;
            }).a, 3);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: { a: 1 } }, function (value) {
                return value instanceof Object ? value : value + 2;
            }).a.a, 3);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: { a: [{
                        a: 1
                    }] } }, function (value) {
                return value instanceof Object ? value : value + 2;
            }).a.a[0].a, 3);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: { a: 1 } }, function (value) {
                return value instanceof Object ? value : value + 2;
            }, function (key, value) {
                return value;
            }, '[]', '[]', 'hasOwnProperty', false).a.a, 1);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: 1 }, function (value) {
                return value instanceof Object ? value : value + 2;
            }, function (key, value) {
                return value;
            }, '[]', '[]', 'hasOwnProperty', false, []).a, 1);
            assert.deepEqual($.Tools.class.addDynamicGetterAndSetter({ a: new Map([['a', 1]]) }, function (value) {
                return value instanceof Object ? value : value + 2;
            }, function (key, value) {
                return value;
            }, 'get', 'set', 'has', true, [Map]).a.a, 3);
        });
        this.test('resolveDynamicDataStructure (' + roundType + ')', function (assert) {
            var _arr27 = [[[null], null], [[false], false], [['1'], '1'], [[3], 3], [[{}], {}], [[{ __evaluate__: '1' }], 1], [[{ __evaluate__: "'1'" }], '1'], [[{ a: { __evaluate__: "'a'" } }], { a: 'a' }], [[{ a: { __evaluate__: 'self.a' } }, ['self'], [{ a: 1 }]], { a: 1 }], [[{ a: { __evaluate__: 'self.a' } }, ['self'], [{ a: 1 }], false], { a: { __evaluate__: 'self.a' } }], [[{ a: { __evaluate__: 'self.a' } }, ['self'], [{ a: 1 }], true, '__run__'], { a: { __evaluate__: 'self.a' } }], [[{ a: { __run__: 'self.a' } }, ['self'], [{ a: 1 }], true, '__run__'], { a: 1 }], [[{ a: [{ __run__: 'self.a' }] }, ['self'], [{ a: 1 }], true, '__run__'], { a: [1] }], [[{ a: { __evaluate__: 'self.b' }, b: 2 }, ['self']], { a: 2, b: 2 }], [[{
                a: { __evaluate__: 'self.b' },
                b: { __evaluate__: 'self.c' },
                c: 2
            }, ['self']], { a: 2, b: 2, c: 2 }], [[{
                a: { __execute__: 'return self.b' },
                b: { __execute__: 'return self.c' },
                c: 2
            }, ['self']], { a: 2, b: 2, c: 2 }]];

            for (var _i27 = 0; _i27 < _arr27.length; _i27++) {
                var test = _arr27[_i27];
                assert.deepEqual($.Tools.class.resolveDynamicDataStructure.apply(_this, test[0]), test[1]);
            }
        });
        this.test('convertCircularObjectToJSON (' + roundType + ')', function (assert) {
            var testObject1 = {};
            var testObject2 = { a: testObject1 };
            testObject1.a = testObject2;
            var _arr28 = [[{}, '{}'], [{ a: null }, '{"a":null}'], [{ a: { a: 2 } }, '{"a":{"a":2}}'], [testObject1, '{"a":{"a":"__circularReference__"}}']];
            for (var _i28 = 0; _i28 < _arr28.length; _i28++) {
                var test = _arr28[_i28];
                assert.deepEqual($.Tools.class.convertCircularObjectToJSON(test[0]), test[1]);
            }
        });
        this.test('convertPlainObjectToMap (' + roundType + ')', function (assert) {
            var _arr29 = [[[null], null], [[true], true], [[0], 0], [[2], 2], [['a'], 'a'], [[{}], new Map()], [[[{}]], [new Map()]], [[[{}], false], [{}]], [[[{ a: {}, b: 2 }]], [new Map([['a', new Map()], ['b', 2]])]], [[[{ b: 2, a: {} }]], [new Map([['a', new Map()], ['b', 2]])]], [[[{ b: 2, a: new Map() }]], [new Map([['a', new Map()], ['b', 2]])]], [[[{ b: 2, a: [{}] }]], [new Map([['a', [new Map()]], ['b', 2]])]]];

            for (var _i29 = 0; _i29 < _arr29.length; _i29++) {
                var test = _arr29[_i29];
                assert.deepEqual($.Tools.class.convertPlainObjectToMap.apply(_this, test[0]), test[1]);
            }
        });
        this.test('convertMapToPlainObject (' + roundType + ')', function (assert) {
            var _arr30 = [[[null], null], [[true], true], [[0], 0], [[2], 2], [['a'], 'a'], [[new Map()], {}], [[[new Map()]], [{}]], [[[new Map()], false], [new Map()]], [[[new Map([['a', 2], [2, 2]])]], [{ a: 2, '2': 2 }]], [[[new Map([['a', new Map()], [2, 2]])]], [{ a: {}, '2': 2 }]], [[[new Map([['a', new Map([['a', 2]])], [2, 2]])]], [{ a: { a: 2 }, '2': 2 }]]];

            for (var _i30 = 0; _i30 < _arr30.length; _i30++) {
                var test = _arr30[_i30];
                assert.deepEqual($.Tools.class.convertMapToPlainObject.apply(_this, test[0]), test[1]);
            }
        });
        this.test('forEachSorted (' + roundType + ')', function (assert) {
            var result = [];
            var tester = function tester(item) {
                return $.Tools.class.forEachSorted(item, function (value, key) {
                    return result.push([key, value]);
                });
            };
            tester({});
            assert.deepEqual(result, []);
            assert.deepEqual(tester({}), []);
            assert.deepEqual(tester([]), []);
            assert.deepEqual(tester({ a: 2 }), ['a']);
            assert.deepEqual(tester({ b: 1, a: 2 }), ['a', 'b']);
            result = [];
            tester({ b: 1, a: 2 });
            assert.deepEqual(result, [['a', 2], ['b', 1]]);
            result = [];

            tester([2, 2]);
            assert.deepEqual(result, [[0, 2], [1, 2]]);
            result = [];
            tester({ '5': 2, '6': 2, '2': 3 });
            assert.deepEqual(result, [['2', 3], ['5', 2], ['6', 2]]);
            result = [];
            tester({ a: 2, c: 2, z: 3 });
            assert.deepEqual(result, [['a', 2], ['c', 2], ['z', 3]]);
            $.Tools.class.forEachSorted([1], function () {
                result = this;
                return result;
            }, 2);
            assert.deepEqual(result, 2);
        });
        this.test('sort (' + roundType + ')', function (assert) {
            var _arr31 = [[[], []], [{}, []], [[1], [0]], [[1, 2, 3], [0, 1, 2]], [[3, 2, 1], [0, 1, 2]], [[2, 3, 1], [0, 1, 2]], [{ '1': 2, '2': 5, '3': 'a' }, ['1', '2', '3']], [{ '2': 2, '1': 5, '-5': 'a' }, ['-5', '1', '2']], [{ '3': 2, '2': 5, '1': 'a' }, ['1', '2', '3']], [{ a: 2, b: 5, c: 'a' }, ['a', 'b', 'c']], [{ c: 2, b: 5, a: 'a' }, ['a', 'b', 'c']], [{ b: 2, c: 5, z: 'a' }, ['b', 'c', 'z']]];

            for (var _i31 = 0; _i31 < _arr31.length; _i31++) {
                var test = _arr31[_i31];
                assert.deepEqual($.Tools.class.sort(test[0]), test[1]);
            }
        });
        this.test('equals (' + roundType + ')', function (assert) {
            var _arr32 = [[1, 1], [new Date(), new Date()], [new Date(1995, 11, 17), new Date(1995, 11, 17)], [/a/, /a/], [{ a: 2 }, { a: 2 }], [{ a: 2, b: 3 }, { a: 2, b: 3 }], [[1, 2, 3], [1, 2, 3]], [[], []], [{}, {}], [[1, 2, 3, { a: 2 }], [1, 2, 3, { a: 2 }]], [[1, 2, 3, [1, 2]], [1, 2, 3, [1, 2]]], [[{ a: 1 }], [{ a: 1 }]], [[{ a: 1, b: 1 }], [{ a: 1 }], []], [[{ a: 1, b: 1 }], [{ a: 1 }], ['a']], [2, 2, 0], [[{ a: 1, b: 1 }], [{ a: 1 }], null, 0], [[{ a: 1 }, { b: 1 }], [{ a: 1 }, { b: 1 }], null, 1], [[{ a: { b: 1 } }, { b: 1 }], [{ a: 1 }, { b: 1 }], null, 1], [[{ a: { b: 1 } }, { b: 1 }], [{ a: { b: 1 } }, { b: 1 }], null, 2], [[{ a: { b: { c: 1 } } }, { b: 1 }], [{ a: { b: 1 } }, { b: 1 }], null, 2], [[{ a: { b: { c: 1 } } }, { b: 1 }], [{ a: { b: 1 } }, { b: 1 }], null, 3, ['b']], [function () {}, function () {}]];

            for (var _i32 = 0; _i32 < _arr32.length; _i32++) {
                var _test5 = _arr32[_i32];
                assert.ok($.Tools.class.equals.apply(_this, _test5));
            }var _arr33 = [[[{ a: { b: 1 } }, { b: 1 }], [{ a: 1 }, { b: 1 }], null, 2], [[{ a: { b: { c: 1 } } }, { b: 1 }], [{ a: { b: 1 } }, { b: 1 }], null, 3], [new Date(1995, 11, 17), new Date(1995, 11, 16)], [/a/i, /a/], [1, 2], [{ a: 2, b: 3 }, { a: 2 }], [[1, 2, 3, 4], [1, 2, 3, 5]], [[1, 2, 3, 4], [1, 2, 3]], [[1, 2, 3, { a: 2 }], [1, 2, 3, { b: 2 }]], [[1, 2, 3, [1, 2]], [1, 2, 3, [1, 2, 3]]], [[1, 2, 3, [1, 2, 3]], [1, 2, 3, [1, 2]]], [[1, 2, 3, [1, 2, 3]], [1, 2, 3, [1, 2, {}]]], [[{ a: 1, b: 1 }], [{ a: 1 }]], [[{ a: 1, b: 1 }], [{ a: 1 }], ['a', 'b']], [1, 2, 0], [[{ a: 1 }, { b: 1 }], [{ a: 1 }], null, 1], [function () {}, function () {}, null, -1, [], false]];
            for (var _i33 = 0; _i33 < _arr33.length; _i33++) {
                var _test6 = _arr33[_i33];
                assert.notOk($.Tools.class.equals.apply(_this, _test6));
            }var test = function test() {};
            assert.ok($.Tools.class.equals(test, test, null, -1, [], false));
        });
        this.test('copyLimitedRecursively (' + roundType + ')', function (assert) {
            var _arr34 = [[[21], 21], [[0, -1], 0], [[0, 1], 0], [[0, 10], 0], [[new Date(0)], new Date(0)], [[/a/], /a/], [[{}], {}], [[{}, -1], {}], [[[]], []], [[new Map(), -1], new Map()], [[{ a: 2 }, 0], { a: 2 }], [[{ a: { a: 2 } }, 0], { a: null }], [[{ a: { a: 2 } }, 1], { a: { a: 2 } }], [[{ a: { a: 2 } }, 2], { a: { a: 2 } }], [[{ a: [{ a: 2 }] }, 1], { a: [null] }], [[{ a: [{ a: 2 }] }, 2], { a: [{ a: 2 }] }], [[{ a: { a: 2 } }, 10], { a: { a: 2 } }], [[new Map([['a', 2]]), 0], new Map([['a', 2]])], [[new Map([['a', new Map([['a', 2]])]]), 0], new Map([['a', null]])], [[new Map([['a', new Map([['a', 2]])]]), 1], new Map([['a', new Map([['a', 2]])]])], [[new Map([['a', new Map([['a', 2]])]]), 2], new Map([['a', new Map([['a', 2]])]])], [[new Map([['a', [new Map([['a', 2]])]]]), 1], new Map([['a', [null]]])], [[new Map([['a', [new Map([['a', 2]])]]]), 2], new Map([['a', [new Map([['a', 2]])]]])], [[new Map([['a', new Map([['a', 2]])]]), 10], new Map([['a', new Map([['a', 2]])]])]];

            for (var _i34 = 0; _i34 < _arr34.length; _i34++) {
                var test = _arr34[_i34];
                assert.deepEqual($.Tools.class.copyLimitedRecursively.apply(_this, test[0]), test[1]);
            }
        });
        // // endregion
        // // region array
        this.test('arrayMerge (' + roundType + ')', function (assert) {
            var _arr35 = [[[], [], []], [[1], [], [1]], [[], [1], [1]], [[1], [1], [1, 1]], [[1, 2, 3, 1], [1, 2, 3], [1, 2, 3, 1, 1, 2, 3]]];

            for (var _i35 = 0; _i35 < _arr35.length; _i35++) {
                var test = _arr35[_i35];
                assert.deepEqual($.Tools.class.arrayMerge(test[0], test[1]), test[2]);
            }
        });
        this.test('arrayMake (' + roundType + ')', function (assert) {
            var _arr36 = [[[], []], [[1, 2, 3], [1, 2, 3]], [1, [1]]];

            for (var _i36 = 0; _i36 < _arr36.length; _i36++) {
                var test = _arr36[_i36];
                assert.deepEqual($.Tools.class.arrayMake(test[0]), test[1]);
            }
        });
        this.test('arrayUnique (' + roundType + ')', function (assert) {
            var _arr37 = [[[1, 2, 3, 1], [1, 2, 3]], [[1, 2, 3, 1, 2, 3], [1, 2, 3]], [[], []], [[1, 2, 3], [1, 2, 3]]];

            for (var _i37 = 0; _i37 < _arr37.length; _i37++) {
                var test = _arr37[_i37];
                assert.deepEqual($.Tools.class.arrayUnique(test[0]), test[1]);
            }
        });
        this.test('arrayAggregatePropertyIfEqual (' + roundType + ')', function (assert) {
            var _arr38 = [[[[{ a: 'b' }], 'a'], 'b'], [[[{ a: 'b' }, { a: 'b' }], 'a'], 'b'], [[[{ a: 'b' }, { a: 'c' }], 'a'], ''], [[[{ a: 'b' }, { a: 'c' }], 'a', false], false]];

            for (var _i38 = 0; _i38 < _arr38.length; _i38++) {
                var test = _arr38[_i38];
                assert.strictEqual($.Tools.class.arrayAggregatePropertyIfEqual.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayDeleteEmptyItems (' + roundType + ')', function (assert) {
            var _arr39 = [[[[{ a: null }]], []], [[[{ a: null, b: 2 }]], [{ a: null, b: 2 }]], [[[{ a: null, b: 2 }], ['a']], []], [[[], ['a']], []], [[[]], []]];

            for (var _i39 = 0; _i39 < _arr39.length; _i39++) {
                var test = _arr39[_i39];
                assert.deepEqual($.Tools.class.arrayDeleteEmptyItems.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayExtract (' + roundType + ')', function (assert) {
            var _arr40 = [[[[{ a: 'b', c: 'd' }], ['a']], [{ a: 'b' }]], [[[{ a: 'b', c: 'd' }], ['b']], [{}]], [[[{ a: 'b', c: 'd' }], ['c']], [{ c: 'd' }]], [[[{ a: 'b', c: 'd' }, { a: 3 }], ['c']], [{ c: 'd' }, {}]], [[[{ a: 'b', c: 'd' }, { c: 3 }], ['c']], [{ c: 'd' }, { c: 3 }]]];

            for (var _i40 = 0; _i40 < _arr40.length; _i40++) {
                var test = _arr40[_i40];
                assert.deepEqual($.Tools.class.arrayExtract.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayExtractIfMatches (' + roundType + ')', function (assert) {
            var _arr41 = [[['b'], /b/, ['b']], [['b'], 'b', ['b']], [['b'], 'a', []], [[], 'a', []], [['a', 'b'], '', ['a', 'b']], [['a', 'b'], '^$', []], [['a', 'b'], 'b', ['b']], [['a', 'b'], '[ab]', ['a', 'b']]];

            for (var _i41 = 0; _i41 < _arr41.length; _i41++) {
                var test = _arr41[_i41];
                assert.deepEqual($.Tools.class.arrayExtractIfMatches(test[0], test[1]), test[2]);
            }
        });
        this.test('arrayExtractIfPropertyExists (' + roundType + ')', function (assert) {
            var _arr42 = [[[{ a: 2 }], 'a', [{ a: 2 }]], [[{ a: 2 }], 'b', []], [[], 'b', []], [[{ a: 2 }, { b: 3 }], 'a', [{ a: 2 }]]];

            for (var _i42 = 0; _i42 < _arr42.length; _i42++) {
                var test = _arr42[_i42];
                assert.deepEqual($.Tools.class.arrayExtractIfPropertyExists(test[0], test[1]), test[2]);
            }
        });
        this.test('arrayExtractIfPropertyMatches (' + roundType + ')', function (assert) {
            var _arr43 = [[[{ a: 'b' }], { a: 'b' }, [{ a: 'b' }]], [[{ a: 'b' }], { a: '.' }, [{ a: 'b' }]], [[{ a: 'b' }], { a: 'a' }, []], [[], { a: 'a' }, []], [[{ a: 2 }], { b: /a/ }, []], [[{ mimeType: 'text/x-webm' }], { mimeType: new RegExp('^text/x-webm$') }, [{ mimeType: 'text/x-webm' }]]];

            for (var _i43 = 0; _i43 < _arr43.length; _i43++) {
                var test = _arr43[_i43];
                assert.deepEqual($.Tools.class.arrayExtractIfPropertyMatches(test[0], test[1]), test[2]);
            }
        });
        this.test('arrayIntersect (' + roundType + ')', function (assert) {
            var _arr44 = [[[['A'], ['A']], ['A']], [[['A', 'B'], ['A']], ['A']], [[[], []], []], [[[5], []], []], [[[{ a: 2 }], [{ a: 2 }]], [{ a: 2 }]], [[[{ a: 3 }], [{ a: 2 }]], []], [[[{ a: 3 }], [{ b: 3 }]], []], [[[{ a: 3 }], [{ b: 3 }], ['b']], []], [[[{ a: 3 }], [{ b: 3 }], ['b'], false], []], [[[{ b: null }], [{ b: null }], ['b']], [{ b: null }]], [[[{ b: null }], [{ b: undefined }], ['b']], []], [[[{ b: null }], [{ b: undefined }], ['b'], false], [{ b: null }]], [[[{ b: null }], [{}], ['b'], false], [{ b: null }]], [[[{ b: undefined }], [{}], ['b'], false], [{ b: undefined }]], [[[{}], [{}], ['b'], false], [{}]], [[[{ b: null }], [{}], ['b']], []], [[[{ b: undefined }], [{}], ['b'], true], [{ b: undefined }]], [[[{ b: 1 }], [{ a: 1 }], { b: 'a' }, true], [{ b: 1 }]]];

            for (var _i44 = 0; _i44 < _arr44.length; _i44++) {
                var test = _arr44[_i44];
                assert.deepEqual($.Tools.class.arrayIntersect.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayMakeRange (' + roundType + ')', function (assert) {
            var _arr45 = [[[[0]], [0]], [[[5]], [0, 1, 2, 3, 4, 5]], [[[]], []], [[[2, 5]], [2, 3, 4, 5]], [[[2, 10], 2], [2, 4, 6, 8, 10]]];

            for (var _i45 = 0; _i45 < _arr45.length; _i45++) {
                var test = _arr45[_i45];
                assert.deepEqual($.Tools.class.arrayMakeRange.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arraySumUpProperty (' + roundType + ')', function (assert) {
            var _arr46 = [[[[{ a: 2 }, { a: 3 }], 'a'], 5], [[[{ a: 2 }, { b: 3 }], 'a'], 2], [[[{ a: 2 }, { b: 3 }], 'c'], 0]];

            for (var _i46 = 0; _i46 < _arr46.length; _i46++) {
                var test = _arr46[_i46];
                assert.strictEqual($.Tools.class.arraySumUpProperty.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayAppendAdd (' + roundType + ')', function (assert) {
            var testObject = {};
            var _arr47 = [[[{}, {}, 'b'], { b: [{}] }], [[testObject, { a: 3 }, 'b'], { b: [{ a: 3 }] }], [[testObject, { a: 3 }, 'b'], { b: [{ a: 3 }, { a: 3 }] }], [[{ b: [2] }, 2, 'b', false], { b: [2, 2] }], [[{ b: [2] }, 2, 'b'], { b: [2] }]];
            for (var _i47 = 0; _i47 < _arr47.length; _i47++) {
                var test = _arr47[_i47];
                assert.deepEqual($.Tools.class.arrayAppendAdd.apply(_this, test[0]), test[1]);
            }
        });
        this.test('arrayRemove (' + roundType + ')', function (assert) {
            var _arr48 = [[[[], 2], []], [[[2], 2], []], [[[2], 2, true], []], [[[1, 2], 2], [1]], [[[1, 2], 2, true], [1]]];

            for (var _i48 = 0; _i48 < _arr48.length; _i48++) {
                var test = _arr48[_i48];
                assert.deepEqual($.Tools.class.arrayRemove.apply(_this, test[0]), test[1]);
            }assert.throws(function () {
                return $.Tools.class.arrayRemove([], 2, true);
            }, new Error("Given target doesn't exists in given list."));
        });
        // // endregion
        // // region string
        this.test('stringConvertToValidRegularExpression', function (assert) {
            var _arr49 = [[[''], ''], [["that's no regex: .*$"], "that's no regex: \\.\\*\\$"], [['-\\[]()^$*+.}-', '}'], '\\-\\\\[\\]\\(\\)\\^\\$\\*\\+\\.}\\-'], [['-\\[]()^$*+.{}-', ['[', ']', '(', ')', '^', '$', '*', '+', '.', '{']], '\\-\\[]()^$*+.{\\}\\-'], [['-', '\\'], '\\-']];

            for (var _i49 = 0; _i49 < _arr49.length; _i49++) {
                var test = _arr49[_i49];
                assert.strictEqual($.Tools.class.stringConvertToValidRegularExpression.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringConvertToValidVariableName', function (assert) {
            var _arr50 = [['', ''], ['a', 'a'], ['_a', '_a'], ['_a_a', '_a_a'], ['_a-a', '_aA'], ['-a-a', 'aA'], ['-a--a', 'aA'], ['--a--a', 'aA']];

            for (var _i50 = 0; _i50 < _arr50.length; _i50++) {
                var test = _arr50[_i50];
                assert.strictEqual($.Tools.class.stringConvertToValidVariableName(test[0]), test[1]);
            }
        });
        // /// region url handling
        this.test('stringEncodeURIComponent (' + roundType + ')', function (assert) {
            var _arr51 = [[[''], ''], [[' '], '+'], [[' ', true], '%20'], [['@:$, '], '@:$,+'], [['+'], '%2B']];

            for (var _i51 = 0; _i51 < _arr51.length; _i51++) {
                var test = _arr51[_i51];
                assert.strictEqual($.Tools.class.stringEncodeURIComponent.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringAddSeparatorToPath (' + roundType + ')', function (assert) {
            var _arr52 = [[[''], ''], [['/'], '/'], [['/a'], '/a/'], [['/a/bb/'], '/a/bb/'], [['/a/bb'], '/a/bb/'], [['/a/bb', '|'], '/a/bb|'], [['/a/bb/', '|'], '/a/bb/|']];

            for (var _i52 = 0; _i52 < _arr52.length; _i52++) {
                var test = _arr52[_i52];
                assert.strictEqual($.Tools.class.stringAddSeparatorToPath.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringHasPathPrefix (' + roundType + ')', function (assert) {
            var _arr53 = [['/admin', '/admin'], ['test', 'test'], ['', ''], ['a', 'a/b'], ['a/', 'a/b'], ['/admin', '/admin#test', '#']];

            for (var _i53 = 0; _i53 < _arr53.length; _i53++) {
                var test = _arr53[_i53];
                assert.ok($.Tools.class.stringHasPathPrefix.apply(_this, test));
            }var _arr54 = [['b', 'a/b'], ['b/', 'a/b'], ['/admin/', '/admin/test', '#'], ['/admin', '/admin/test', '#']];
            for (var _i54 = 0; _i54 < _arr54.length; _i54++) {
                var _test7 = _arr54[_i54];
                assert.notOk($.Tools.class.stringHasPathPrefix.apply(_this, _test7));
            }
        });
        this.test('stringGetDomainName (' + roundType + ')', function (assert) {
            var _arr55 = [[['https://www.test.de/site/subSite?param=value#hash'], 'www.test.de'], [['a', true], true], [['http://www.test.de'], 'www.test.de'], [['http://a.de'], 'a.de'], [['http://localhost'], 'localhost'], [['localhost', 'a'], 'a'], [['a', $.global.location.hostname], $.global.location.hostname], [['//a'], 'a'], [['a/site/subSite?param=value#hash', $.global.location.hostname], $.global.location.hostname], [['/a/site/subSite?param=value#hash', $.global.location.hostname], $.global.location.hostname], [['//alternate.local/a/site/subSite?param=value#hash'], 'alternate.local'], [['//alternate.local/'], 'alternate.local']];

            for (var _i55 = 0; _i55 < _arr55.length; _i55++) {
                var test = _arr55[_i55];
                assert.strictEqual($.Tools.class.stringGetDomainName.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringGetPortNumber (' + roundType + ')', function (assert) {
            var _arr56 = [[['https://www.test.de/site/subSite?param=value#hash'], 443], [['http://www.test.de'], 80], [['http://www.test.de', true], true], [['www.test.de', true], true], [['a', true], true], [['a', true], true], [['a:80'], 80], [['a:20'], 20], [['a:444'], 444], [['http://localhost:89'], 89], [['https://localhost:89'], 89]];

            for (var _i56 = 0; _i56 < _arr56.length; _i56++) {
                var test = _arr56[_i56];
                assert.strictEqual($.Tools.class.stringGetPortNumber.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringGetProtocolName (' + roundType + ')', function (assert) {
            var _arr57 = [[['https://www.test.de/site/subSite?param=value#hash'], 'https'], [['http://www.test.de'], 'http'], [['//www.test.de', $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], [['http://a.de'], 'http'], [['ftp://localhost'], 'ftp'], [['a', $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], [['a/site/subSite?param=value#hash', $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], [['/a/site/subSite?param=value#hash', 'a'], 'a'], [['alternate.local/a/site/subSite?param=value#hash', 'b'], 'b'], [['alternate.local/', 'c'], 'c'], [['', $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)], $.global.location.protocol.substring(0, $.global.location.protocol.length - 1)]];

            for (var _i57 = 0; _i57 < _arr57.length; _i57++) {
                var test = _arr57[_i57];
                assert.strictEqual($.Tools.class.stringGetProtocolName.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringGetURLVariable (' + roundType + ')', function (assert) {
            assert.ok(Array.isArray($.Tools.class.stringGetURLVariable()));
            assert.ok(Array.isArray($.Tools.class.stringGetURLVariable(null, '&')));
            assert.ok(Array.isArray($.Tools.class.stringGetURLVariable(null, '#')));
            var _arr58 = [[['notExisting'], undefined], [['notExisting', '&'], undefined], [['notExisting', '#'], undefined], [['test', '?test=2'], '2'], [['test', 'test=2'], '2'], [['test', 'test=2&a=2'], '2'], [['test', 'b=3&test=2&a=2'], '2'], [['test', '?b=3&test=2&a=2'], '2'], [['test', '?b=3&test=2&a=2'], '2'], [['test', '&', '$', '!', '', '#$test=2'], '2'], [['test', '&', '$', '!', '?test=4', '#$test=3'], '4'], [['a', '&', '$', '!', '?test=4', '#$test=3'], undefined], [['test', '#', '$', '!', '?test=4', '#$test=3'], '3'], [['test', '#', '$', '!', '', '#!test#$test=4'], '4'], [['test', '#', '$', '!', '', '#!/test/a#$test=4'], '4'], [['test', '#', '$', '!', '', '#!/test/a/#$test=4'], '4'], [['test', '#', '$', '!', '', '#!test/a/#$test=4'], '4'], [['test', '#', '$', '!', '', '#!/#$test=4'], '4'], [['test', '#', '$', '!', '', '#!test?test=3#$test=4'], '4'], [['test', '&', '?', '!', null, '#!a?test=3'], '3'], [['test', '&', '$', '!', null, '#!test#$test=4'], '4'], [['test', '&', '$', '!', null, '#!test?test=3#$test=4'], '4']];
            for (var _i58 = 0; _i58 < _arr58.length; _i58++) {
                var test = _arr58[_i58];
                assert.strictEqual($.Tools.class.stringGetURLVariable.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringIsInternalURL (' + roundType + ')', function (assert) {
            var _arr59 = [['https://www.test.de/site/subSite?param=value#hash', 'https://www.test.de/site/subSite?param=value#hash'], ['//www.test.de/site/subSite?param=value#hash', '//www.test.de/site/subSite?param=value#hash'], [$.global.location.protocol + '//www.test.de/site/subSite' + '?param=value#hash', $.global.location.protocol + '//www.test.de/site/subSite' + '?param=value#hash'], ['https://www.test.de:443/site/subSite?param=value#hash', 'https://www.test.de/site/subSite?param=value#hash'], ['//www.test.de:80/site/subSite?param=value#hash', '//www.test.de/site/subSite?param=value#hash'], [$.global.location.href, $.global.location.href], ['1', $.global.location.href], ['#1', $.global.location.href], ['/a', $.global.location.href]];

            for (var _i59 = 0; _i59 < _arr59.length; _i59++) {
                var test = _arr59[_i59];
                assert.ok($.Tools.class.stringIsInternalURL.apply(_this, test));
            }var _arr60 = [[$.global.location.protocol + '//www.test.de/site/subSite' + '?param=value#hash', 'ftp://www.test.de/site/subSite?param=value#hash'], ['https://www.test.de/site/subSite?param=value#hash', 'http://www.test.de/site/subSite?param=value#hash'], ['http://www.test.de/site/subSite?param=value#hash', 'test.de/site/subSite?param=value#hash'], [$.global.location.protocol + '//www.test.de:' + ($.global.location.port + '/site/subSite') + '?param=value#hash/site/subSite?param=value#hash'], ['http://www.test.de:' + $.global.location.port + '/site/subSite?' + 'param=value#hash', 'https://www.test.de/site/subSite?param=value#hash']];
            for (var _i60 = 0; _i60 < _arr60.length; _i60++) {
                var _test8 = _arr60[_i60];
                assert.notOk($.Tools.class.stringIsInternalURL.apply(_this, _test8));
            }
        });
        this.test('stringNormalizeURL (' + roundType + ')', function (assert) {
            var _arr61 = [['www.test.com', 'http://www.test.com'], ['test', 'http://test'], ['http://test', 'http://test'], ['https://test', 'https://test']];

            for (var _i61 = 0; _i61 < _arr61.length; _i61++) {
                var test = _arr61[_i61];
                assert.strictEqual($.Tools.class.stringNormalizeURL(test[0]), test[1]);
            }
        });
        this.test('stringRepresentURL (' + roundType + ')', function (assert) {
            var _arr62 = [['http://www.test.com', 'www.test.com'], ['ftp://www.test.com', 'ftp://www.test.com'], ['https://www.test.com', 'www.test.com'], [undefined, ''], [null, ''], [false, ''], [true, ''], ['', ''], [' ', '']];

            for (var _i62 = 0; _i62 < _arr62.length; _i62++) {
                var test = _arr62[_i62];
                assert.strictEqual($.Tools.class.stringRepresentURL(test[0]), test[1]);
            }
        });
        // /// endregion
        this.test('stringCompressStyleValue (' + roundType + ')', function (assert) {
            var _arr63 = [['', ''], [' border: 1px  solid red;', 'border:1px solid red'], ['border : 1px solid red ', 'border:1px solid red'], ['border : 1px  solid red ;', 'border:1px solid red'], ['border : 1px  solid red   ; ', 'border:1px solid red'], ['height: 1px ; width:2px ; ', 'height:1px;width:2px'], [';;height: 1px ; width:2px ; ;', 'height:1px;width:2px'], [' ;;height: 1px ; width:2px ; ;', 'height:1px;width:2px'], [';height: 1px ; width:2px ; ', 'height:1px;width:2px']];

            for (var _i63 = 0; _i63 < _arr63.length; _i63++) {
                var test = _arr63[_i63];
                assert.strictEqual($.Tools.class.stringCompressStyleValue(test[0]), test[1]);
            }
        });
        this.test('stringCamelCaseToDelimited (' + roundType + ')', function (assert) {
            var _arr64 = [[['hansPeter'], 'hans-peter'], [['hansPeter', '|'], 'hans|peter'], [[''], ''], [['h'], 'h'], [['hP', ''], 'hp'], [['hansPeter'], 'hans-peter'], [['hans-peter'], 'hans-peter'], [['hansPeter', '_'], 'hans_peter'], [['hansPeter', '+'], 'hans+peter'], [['Hans'], 'hans'], [['hansAPIURL', '-', ['api', 'url']], 'hans-api-url'], [['hansPeter', '-', []], 'hans-peter']];

            for (var _i64 = 0; _i64 < _arr64.length; _i64++) {
                var test = _arr64[_i64];
                assert.strictEqual($.Tools.class.stringCamelCaseToDelimited.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringCapitalize (' + roundType + ')', function (assert) {
            var _arr65 = [['hansPeter', 'HansPeter'], ['', ''], ['a', 'A'], ['A', 'A'], ['AA', 'AA'], ['Aa', 'Aa'], ['aa', 'Aa']];

            for (var _i65 = 0; _i65 < _arr65.length; _i65++) {
                var test = _arr65[_i65];
                assert.strictEqual($.Tools.class.stringCapitalize(test[0]), test[1]);
            }
        });
        this.test('stringDelimitedToCamelCase (' + roundType + ')', function (assert) {
            var _arr66 = [[['hans-peter'], 'hansPeter'], [['hans|peter', '|'], 'hansPeter'], [[''], ''], [['h'], 'h'], [['hans-peter'], 'hansPeter'], [['hans--peter'], 'hans-Peter'], [['Hans-Peter'], 'HansPeter'], [['-Hans-Peter'], '-HansPeter'], [['-'], '-'], [['hans-peter', '_'], 'hans-peter'], [['hans_peter', '_'], 'hansPeter'], [['hans_id', '_'], 'hansID'], [['url_hans_id', '_', ['hans']], 'urlHANSId'], [['url_hans_1', '_'], 'urlHans1'], [['hansUrl1', '-', ['url'], true], 'hansUrl1'], [['hans-url', '-', ['url'], true], 'hansURL'], [['hans-Url', '-', ['url'], true], 'hansUrl'], [['hans-Url', '-', ['url'], false], 'hansURL'], [['hans-Url', '-', [], false], 'hansUrl'], [['hans--Url', '-', [], false, true], 'hansUrl']];

            for (var _i66 = 0; _i66 < _arr66.length; _i66++) {
                var test = _arr66[_i66];
                assert.strictEqual($.Tools.class.stringDelimitedToCamelCase.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringFormat (' + roundType + ')', function (assert) {
            var _arr67 = [[['{1}', 'test'], 'test'], [['', 'test'], ''], [['{1}'], '{1}'], [['{1} test {2} - {2}', 1, 2], '1 test 2 - 2']];

            for (var _i67 = 0; _i67 < _arr67.length; _i67++) {
                var test = _arr67[_i67];
                assert.strictEqual($.Tools.class.stringFormat.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringGetRegularExpressionValidated (' + roundType + ')', function (assert) {
            var _arr68 = [["that's no regex: .*$", "that's no regex: \\.\\*\\$"], ['', ''], ['-[]()^$*+.}-\\', '\\-\\[\\]\\(\\)\\^\\$\\*\\+\\.\\}\\-\\\\'], ['-', '\\-']];

            for (var _i68 = 0; _i68 < _arr68.length; _i68++) {
                var test = _arr68[_i68];
                assert.strictEqual($.Tools.class.stringGetRegularExpressionValidated(test[0]), test[1]);
            }
        });
        this.test('stringLowerCase (' + roundType + ')', function (assert) {
            var _arr69 = [['HansPeter', 'hansPeter'], ['', ''], ['A', 'a'], ['a', 'a'], ['aa', 'aa'], ['Aa', 'aa'], ['aa', 'aa']];

            for (var _i69 = 0; _i69 < _arr69.length; _i69++) {
                var test = _arr69[_i69];
                assert.strictEqual($.Tools.class.stringLowerCase(test[0]), test[1]);
            }
        });
        this.test('stringFindNormalizedMatchRange (' + roundType + ')', function (assert) {
            var _arr70 = [[['', ''], null], [['hans', ''], null], [['hans', 'a'], [1, 2]], [['hans', 'an'], [1, 3]], [['hans', 'han'], [0, 3]], [['hans', 'hans'], [0, 4]], [['hans', 'ans'], [1, 4]], [['hans hans', 'ans'], [1, 4]], [[' hAns ', 'ans', function (value) {
                return value.toLowerCase();
            }], [2, 5]], [['a straße b', 'strasse', function (value) {
                return value.replace(/ß/g, 'ss').toLowerCase();
            }], [2, 8]], [['a strasse b', 'strasse', function (value) {
                return value.replace(/ß/g, 'ss').toLowerCase();
            }], [2, 9]], [['a strasse b', 'straße', function (value) {
                return value.replace(/ß/g, 'ss').toLowerCase();
            }], [2, 9]]];

            for (var _i70 = 0; _i70 < _arr70.length; _i70++) {
                var test = _arr70[_i70];
                assert.deepEqual($.Tools.class.stringFindNormalizedMatchRange.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringMark (' + roundType + ')', function (assert) {
            var _arr71 = [[[''], ''], [['test', 'e'], 't<span class="tools-mark">e</span>st'], [['test', 'es'], 't<span class="tools-mark">es</span>t'], [['test', 'test'], '<span class="tools-mark">test</span>'], [['test', ''], 'test'], [['test', 'tests'], 'test'], [['', 'test'], ''], [['test', 'e', '<a>{1}</a>'], 't<a>e</a>st'], [['test', ['e'], '<a>{1}</a>'], 't<a>e</a>st'], [['test', 'E', '<a>{1}</a>'], 't<a>e</a>st'], [['test', 'E', '<a>{1}</a>'], 't<a>e</a>st'], [['tesT', 't', '<a>{1}</a>'], '<a>t</a>es<a>T</a>'], [['tesT', 't', '<a>{1} - {1}</a>'], '<a>t - t</a>es<a>T - T</a>'], [['test', 'E', '<a>{1}</a>', function (value) {
                return '' + value;
            }], 'test'], [['abcd', ['a', 'c']], '<span class="tools-mark">a</span>b' + '<span class="tools-mark">c</span>d'], [['aabcd', ['a', 'c']], '<span class="tools-mark">a</span>' + '<span class="tools-mark">a</span>b' + '<span class="tools-mark">c</span>d'], [['acbcd', ['a', 'c', 'd']], '<span class="tools-mark">a</span>' + '<span class="tools-mark">c</span>b' + '<span class="tools-mark">c</span>' + '<span class="tools-mark">d</span>'], [['a EBikes München', ['ebikes', 'münchen'], '<a>{1}</a>', function (value) {
                return ('' + value).toLowerCase();
            }], 'a <a>EBikes</a> <a>München</a>'], [['a E-Bikes München', ['ebikes', 'münchen'], '<a>{1}</a>', function (value) {
                return ('' + value).toLowerCase().replace('-', '');
            }], 'a <a>E-Bikes</a> <a>München</a>'], [['a str. 2', ['straße', '2'], '<a>{1}</a>', function (value) {
                return ('' + value).toLowerCase().replace('str.', 'strasse').replace('ß', 'ss');
            }], 'a <a>str.</a> <a>2</a>'], [['EGO Movement Store E-Bikes München', ['eBikes', 'München'], '<a>{1}</a>', function (value) {
                return ('' + value).toLowerCase().replace(/[-_]+/g, '').replace(/ß/g, 'ss').replace(/(^| )str\.( |$)/g, 'strasse').replace(/[& ]+/g, ' ');
            }], 'EGO Movement Store <a>E-Bikes</a> <a>München</a>']];

            for (var _i71 = 0; _i71 < _arr71.length; _i71++) {
                var test = _arr71[_i71];
                assert.strictEqual($.Tools.class.stringMark.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringMD5 (' + roundType + ')', function (assert) {
            var _arr72 = [[[''], 'd41d8cd98f00b204e9800998ecf8427e'], [['test'], '098f6bcd4621d373cade4e832627b4f6'], [['ä'], '8419b71c87a225a2c70b50486fbee545'], [['test', true], '098f6bcd4621d373cade4e832627b4f6'], [['ä', true], 'c15bcc5577f9fade4b4a3256190a59b0']];

            for (var _i72 = 0; _i72 < _arr72.length; _i72++) {
                var test = _arr72[_i72];
                assert.strictEqual($.Tools.class.stringMD5.apply(_this, test[0]), test[1]);
            }
        });
        this.test('stringNormalizePhoneNumber (' + roundType + ')', function (assert) {
            var _arr73 = [['0', '0'], [0, '0'], ['+49 172 (0) / 0212 - 3', '0049172002123']];

            for (var _i73 = 0; _i73 < _arr73.length; _i73++) {
                var test = _arr73[_i73];
                assert.strictEqual($.Tools.class.stringNormalizePhoneNumber(test[0]), test[1]);
            }
        });
        this.test('stringRepresentPhoneNumber (' + roundType + ')', function (assert) {
            var _arr74 = [['0', '0'], ['0172-12321-1', '+49 (0) 172 / 123 21-1'], ['0172-123211', '+49 (0) 172 / 12 32 11'], ['0172-1232111', '+49 (0) 172 / 123 21 11'], [undefined, ''], [null, ''], [false, ''], [true, ''], ['', ''], [' ', '']];

            for (var _i74 = 0; _i74 < _arr74.length; _i74++) {
                var test = _arr74[_i74];
                assert.strictEqual($.Tools.class.stringRepresentPhoneNumber(test[0]), test[1]);
            }
        });
        this.test('stringDecodeHTMLEntities (' + roundType + ')', function (assert) {
            var _arr75 = [['', ''], ['<div></div>', '<div></div>'], ['<div>&amp;</div>', '<div>&</div>'], ['<div>&amp;&auml;&Auml;&uuml;&Uuml;&ouml;&Ouml;</div>', '<div>&äÄüÜöÖ</div>']];

            for (var _i75 = 0; _i75 < _arr75.length; _i75++) {
                var test = _arr75[_i75];
                assert.equal($.Tools.class.stringDecodeHTMLEntities(test[0]), test[1]);
            }
        });
        this.test('normalizeDomNodeSelector (' + roundType + ')', function (assert) {
            var _arr76 = [['div', 'body div'], ['div p', 'body div p'], ['body div', 'body div'], ['body div p', 'body div p'], ['', 'body']];

            for (var _i76 = 0; _i76 < _arr76.length; _i76++) {
                var test = _arr76[_i76];
                assert.strictEqual(tools.normalizeDomNodeSelector(test[0]), test[1]);
            }var _arr77 = ['', 'div', 'div, p'];
            for (var _i77 = 0; _i77 < _arr77.length; _i77++) {
                var _test9 = _arr77[_i77];
                assert.strictEqual($.Tools({
                    domNodeSelectorPrefix: ''
                }).normalizeDomNodeSelector(_test9), _test9);
            }
        });
        // / endregion
        // // region number
        this.test('numberIsNotANumber (' + roundType + ')', function (assert) {
            var _arr78 = [[NaN, true], [{}, false], [undefined, false], [new Date().toString(), false], [null, false], [false, false], [true, false], [0, false]];

            for (var _i78 = 0; _i78 < _arr78.length; _i78++) {
                var test = _arr78[_i78];
                assert.strictEqual($.Tools.class.numberIsNotANumber(test[0]), test[1]);
            }
        });
        this.test('numberRound (' + roundType + ')', function (assert) {
            var _arr79 = [[[1.5, 0], 2], [[1.4, 0], 1], [[1.4, -1], 0], [[1000, -2], 1000], [[999, -2], 1000], [[950, -2], 1000], [[949, -2], 900], [[1.2345], 1], [[1.2345, 2], 1.23], [[1.2345, 3], 1.235], [[1.2345, 4], 1.2345], [[699, -2], 700], [[650, -2], 700], [[649, -2], 600]];

            for (var _i79 = 0; _i79 < _arr79.length; _i79++) {
                var test = _arr79[_i79];
                assert.strictEqual($.Tools.class.numberRound.apply(_this, test[0]), test[1]);
            }
        });
        // // endregion
        // // region data transfer
        if (typeof targetTechnology !== 'undefined' && targetTechnology === 'web' && roundType === 'withJQuery') {
            this.test('sendToIFrame (' + roundType + ')', function (assert) {
                var iFrame = $('<iframe>').hide().attr('name', 'test');
                $('body').append(iFrame);
                assert.ok($.Tools.class.sendToIFrame(iFrame, window.document.URL, { test: 5 }, 'get', true));
            });
            this.test('sendToExternalURL (' + roundType + ')', function (assert) {
                return assert.ok(tools.sendToExternalURL(window.document.URL, { test: 5 }));
            });
        }
        // // endregion
        // / endregion
        // / region protected
        if (roundType === 'withJQuery') this.test('_bindEventHelper (' + roundType + ')', function (assert) {
            var _arr80 = [[['body']], [['body'], true], [['body'], false, 'bind']];

            for (var _i80 = 0; _i80 < _arr80.length; _i80++) {
                var test = _arr80[_i80];
                assert.ok(tools._bindEventHelper.apply(tools, test));
            }
        });
        // / endregion
        // endregion
    }, closeWindow: false, roundTypes: [] }];
// endregion
// region test runner (in browserAPI)
var testRan = false;
(0, _browserAPI2.default)(function (browserAPI) {
    return setTimeout(function () {
        testRan = true;
        // region configuration
        QUnit.config = require('clientnode').default.extendObject(QUnit.config || {}, {
            /*
            notrycatch: true,
            noglobals: true,
            */
            altertitle: true,
            autostart: true,
            fixture: '',
            hidepassed: false,
            maxDepth: 3,
            reorder: false,
            requireExpects: false,
            testTimeout: 30 * 1000,
            scrolltop: false
        });
        // endregion
        var testPromises = [];
        var closeWindow = false;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = tests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var test = _step.value;

                if (test.closeWindow) closeWindow = true;
                var _arr81 = ['plain', 'withDocument', 'withJQuery'];
                for (var _i81 = 0; _i81 < _arr81.length; _i81++) {
                    var _roundType = _arr81[_i81];
                    if (test.roundTypes.length === 0 || test.roundTypes.includes(_roundType)) {
                        // NOTE: Enforce to reload module to rebind "$".
                        delete require.cache[require.resolve('clientnode')];
                        var _$bodyDomNode = void 0;
                        var _$ = void 0;
                        if (_roundType === 'plain') {
                            window.$ = null;
                            _$ = require('clientnode').$;
                        } else {
                            if (_roundType === 'withJQuery') {
                                _$ = require('jquery');
                                window.$ = _$;
                            }
                            _$ = require('clientnode').$;
                            _$.context = window.document;
                            _$bodyDomNode = _$('body');
                        }
                        var _tools = _roundType === 'plain' ? _$.Tools() : _$('body').Tools();
                        var testPromise = test.callback.call(QUnit, _roundType, typeof TARGET_TECHNOLOGY === 'undefined' ? null : TARGET_TECHNOLOGY, _$, browserAPI, _tools, _$bodyDomNode);
                        if ((typeof testPromise === 'undefined' ? 'undefined' : _typeof(testPromise)) === 'object' && testPromise && 'then' in testPromise) testPromises.push(testPromise);
                    }
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        Promise.all(testPromises).then(function () {
            if (typeof TARGET_TECHNOLOGY === 'undefined' || TARGET_TECHNOLOGY === 'node') {
                if (closeWindow) browserAPI.window.close();
                QUnit.load();
            }
        });
        // region hot module replacement handler
        /*
            NOTE: hot module replacement doesn't work with async tests yet since
            qunit is not resetable yet:
             if (typeof module === 'object' && 'hot' in module && module.hot) {
                module.hot.accept()
                // IgnoreTypeCheck
                module.hot.dispose(():void => {
                    QUnit.reset()
                    console.clear()
                }
            }
        */
        // endregion
    }, 0);
});
// endregion
// region export test register function

// endregion
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion
var testRegistered = false;
/**
 * Registers a complete test set.
 * @param callback - A function containing all tests to run. This callback gets
 * some useful parameters and will be executed in context of qunit.
 * @param roundTypes - A list of round types which should be avoided.
 * @param closeWindow - Indicates whether the window object should be closed
 * after finishing all tests.
 * @returns The list of currently registered tests.
 */

//# sourceMappingURL=data:application/json;base64,